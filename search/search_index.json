{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"knora-py knora-py is a python package containing a command line tool for data model (ontology) creation and manipulation based on JSON input file a gui-based local tool to directly manipulate project data, users, groups and data models on a live server Python3 modules that implement CRUD (Create, Read, Update, Delete) operations for projects, users, groups and ontologies The package consists of: knora-create-onto A command line program to create an data model from a simple JSON description or to read a data model from a live knora server and dump it into a JSOn file. knora-console A small GUI app for creating projects ontologies, users and group directly on a live knora server a set of python3 modules Install To install the latest version published on PyPI run: $ pip3 install knora To update to the latest version run: $ pip3 install --upgrade knora To install from source, i.e. this repository run: $ python3 setup.py install Requirements To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt Publishing Generate distribution package. Make sure you have the latest versions of setuptools and wheel installed: $ python3 -m pip install --upgrade pip setuptools wheel $ python3 setup.py sdist bdist_wheel You can install the package locally from the dist: $ python3 -m pip ./dist/some_name.whl Upload package with twine , first create ~/.pypirc : [distutils] index-servers=pypi [pypi] repository = https://upload.pypi.org/legacy/ username =your_username_on_pypi then upload: $ python3 -m pip install --upgrade tqdm twine $ python3 -m twine upload dist/* For local development: $ python3 setup.py develop Testing $ pip3 install pytest $ pip3 install --editable . $ pytest Requirements To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Introduction"},{"location":"#knora-py","text":"knora-py is a python package containing a command line tool for data model (ontology) creation and manipulation based on JSON input file a gui-based local tool to directly manipulate project data, users, groups and data models on a live server Python3 modules that implement CRUD (Create, Read, Update, Delete) operations for projects, users, groups and ontologies The package consists of: knora-create-onto A command line program to create an data model from a simple JSON description or to read a data model from a live knora server and dump it into a JSOn file. knora-console A small GUI app for creating projects ontologies, users and group directly on a live knora server a set of python3 modules","title":"knora-py"},{"location":"#install","text":"To install the latest version published on PyPI run: $ pip3 install knora To update to the latest version run: $ pip3 install --upgrade knora To install from source, i.e. this repository run: $ python3 setup.py install","title":"Install"},{"location":"#requirements","text":"To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Requirements"},{"location":"#publishing","text":"Generate distribution package. Make sure you have the latest versions of setuptools and wheel installed: $ python3 -m pip install --upgrade pip setuptools wheel $ python3 setup.py sdist bdist_wheel You can install the package locally from the dist: $ python3 -m pip ./dist/some_name.whl Upload package with twine , first create ~/.pypirc : [distutils] index-servers=pypi [pypi] repository = https://upload.pypi.org/legacy/ username =your_username_on_pypi then upload: $ python3 -m pip install --upgrade tqdm twine $ python3 -m twine upload dist/* For local development: $ python3 setup.py develop","title":"Publishing"},{"location":"#testing","text":"$ pip3 install pytest $ pip3 install --editable . $ pytest","title":"Testing"},{"location":"#requirements_1","text":"To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Requirements"},{"location":"create_onto/","text":"knora-create-onto The command create-onto can be used to upload a data model (ontology) from a JSON file to a knora server, or to dump a data model from a knora server to a JSON file. knora-create-onto create creates an ontology. Furthermore, the script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model. knora-create-onto get reads an ontology from a server and creates a JSON file that can be used again by knora-create-onto create to implement the data model on another server Usage Create an ontology on a server $ knora-create-onto create [options] data_model_definition.json The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. \"-V\" | \"--validate\" : If this flag is set, only the validation of the JSON runs. \"-l\" | \"--lists\" : This only creates the lists using a simplified schema . Please note that in this case the project must exist. \"-v\" | \"--verbose\" : Print out some information about progress So for example you can have the command: $ knora-create-onto create -s https://api.server data_model_definition.json Get an ontology from a server $ knora-create-onto get [options] output-file The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. \"-P project\" | \"--project shortcode|shortname|iri\" : Shortcode, shortname or iri of project \"-v\" | \"--verbose\" : Print out some information about progress JSON ontology definition format Introduction This document contains all the information you need to create an ontology that's used by Knora. In the first section you find a rough overview of the ontology definition, all the necessary components with a definition and a short example of the definition. A short overview In the following section, you find all the mentioned parts with a detailed explanation. Right at the beginning we look at the basic fields that belong to an ontology definition. This serves as an overview for you to which you can return at any time while you read the description. A complete ontology definition looks like this: { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0123\", \"shortname\": \"BiZ\", \"longname\": \"Bildung in Zahlen\", \"descriptions\": {}, \"keywords\": [], \"lists\": [], \"groups\": [], \"users\": [], \"ontologies\": [] } } As you can see, only two umbrella terms define our ontology: the \"prefixes\" object and the \"project\" object. In the following we take a deeper look into both of them since, as you can see in the example above, both objects have further fine grained definition levels. \"Prefixes\" object The \"prefixes\" object contains - as you may already have guessed by the name - the prefixes of external ontologies that are also used in the current project. All prefixes are composed of a keyword, followed by its iri. This is used as a shortcut for later so that you don't always have to specify the full qualified iri but can use the much shorter keyword instead. That means that e.g. instead of addressing a property called \"familyname\" via http://xmlns.com/foaf/0.1/familyName you can simply use foaf:familyName. As you can see in the example below, you can have more then one prefix too. In the example we have \"foaf\" as well as \"dcterms\" as our prefixes. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" } } \"Project\" object Right after the \"prefix\" object the \"project\" object has to follow, which contains all resources and properties of the ontology. The \"project\" object is the bread and butter of the ontology. All its important properties are specified therein. As you saw in the complete ontology definition in the beginning, the project definitions requires exactly all of the following datafields: shortcode shortname longname keywords ontologies Whereas the following fields are optional (if one or more of these fields are not used, it must be omitted): descriptions lists groups users So a simple example definition of the \"project\" object could look like this: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" , \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project\", \"de\": \"Dies ist ein einfaches Beispielprojekt\" } \"keywords\": [\"example\", \"simple\"], \"lists\": [\u2026], \"groups\": [\u2026], \"users\": [\u2026], \"ontology\": {\u2026} } Simple key/value pairs At that point we will go through all of this step by step and take a more in depth view on the individual fields of the \"project\" object. The first four fields of the \"project\" object are \"key\"/\"value\" pairs. Therefore they are quite simple. Shortcode It's a hexadecimal string in the range between \"0000\" and \"FFFF\" that's used to uniquely identifying the project. The shortcode has to be provided by the DaSCH. Shortname This is a short name (string) for the project. It's ment to be like a nickname. If the name of the project is e.g. \"Albus Percival Wulfric Dumbledore\", then the shortname for it could be \"Albi\". Longname A longer string that provides the full name of the project. In our example, the longname would be \"Albus Percival Wulfric Dumbledore\". Descriptions The descriptions specify the content of the project in exactly one or more strings. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as a JSON object with the language as \"key\" and the description as \"value\". See the example above inside the curly brackets after \"descriptions\" to see what that means. Key/object pairs The following fields are not simple \"key\"/\"value\" pairs. They do have a key, the value however is another object and therefore has an internal structure. Due to the increased complexity of these objects, they are looked at in more detail. Keywords An array of keywords is used to roughly describe the project in single words. A project that deals e.g. with old monastery manuscripts could possess the keywords \"monastery\", \"manuscripts\", \"medieval\", (...). The array can be empty as well e.i. \"keywords\": []. Lists The list object is used to give the resources of the ontology a taxonomic quality. A taxonomy makes it possible to place a set of objects in subcategories. The big advantage of a taxonomic structure is that the user can subcategorize the objects. This allows the user to formulate his search requests more or less specifically as desired. Suppose an ontology is about the animal kingdom. The individual resources of our ontology symbolize individual animal species. It would now be practical if we could search in a query only for animals that belong to the class of mammals. Or one would wish to find only invertebrates. Or one would like to find very specifically only all kinds of small cats. The taxonomy, which is defined in the list object, makes this possible. A taxonomy is a hierarchical list of categories in a kind of tree structure. The taxonomy must be complete. This means that the entire set of resources can be mapped to the sub-categorization of the taxonomy. To come back to the previous example: It must not be possible that an animal within our resource set cannot be mapped to a subcategory of our taxonomy. The taxonomic-hirarchical structure is mapped using JSON. This is because JSON inherently implements a tree structure as well. The root of the taxonomy tree is always the name of the taxonomy. The root always stands alone at the top of the tree. It is followed by any number of levels, on which any number of subcategories can be placed. Suppose you want to build a taxonomy of dogs. The root would be the name of the taxonomy e.g. \"dogtaxonomy\". The next level on the hierarchy could be the wolf, because all dogs are descended from the wolf. So we have one element on root level - the name of the taxonomy, and one element on the next lower level, the wolf (Canis lupus). The wolf, in turn, has four closest relatives: the Matris Optima, the Intermediate, the Leiner and the Inostranzewi. Our taxonomy now looks as follows: On the root-plane we have the name of the taxonomy. As only child node we have the wolf on the second level. This node has four children on the third level. This taxonomy can be continued until we have categorized all kinds of dogs. As a side note: This dog taxonomy has been largely disproved in modern times, but is well suited to represent the structure of a list object. As already mentioned, the big advantage of a taxonomic categorization of resources is that we can search for dog breeds very concretely. We can generally filter for \"wolf\", where we find all dog breeds that exist. Or we can search specifically for \"Spaniel\", where we find all subcategories of Spaniel, such as Clumber Spaniel or Sussex Spaniel It is important to note that a flat taxonomy is also allowed. This means that a taxonomy from exactly two levels is allowed. We have a root level, with the name of the taxonomy, followed by a single level. Within this second level, any number of categories can coexist equally, but since they are on the same level, they are not hierarchically dependent on each other. For example, you could define a taxonomy \"soccer clubs\", which have the categories \"FCB\", \"FCZ\", (...) in the second level. FCBasel has no hierarchical connection to FCZ\u00fcrich. Their taxonomic structure is therefore flat. A resource can be assigned to a taxonomic node within its properties. So a resource \"animal\" can have the property \"mammal\". It is important to note that it is possible that a resource can have more than one taxonomic name. How many different taxonomic names a resource can have depends on its cardinality. If it has only the cardinality of 1, it can have only one taxonomic name. But if it has a cardinality of 10, the property can be used for ten different things - thus potentially supporting ten different taxonomic categories. This is the reason why a property can have more than one taxonomic name. A node of the Taxonomy may have the following elements: name : Name of the node. This should be unique for the given list. The name-element is optional. labels : Language dependent labels in the form { \"<lang>\": \"<label>, ... } . The labels-element is mandatory. It needs to specify at least one language. comments : Language dependent comments (optional) in the form { \"<lang>\": \"<comment>, ... } . The comments-element is optional. nodes : Array of subnodes. If you have a non-hierarchical taxonomy (i.e. a taxonomy with only 2 levels, the root level and another level), you don't have child nodes. Therefore the nodes element can be omitted in case of a flat taxonomy. Here is an example on how to build a taxonomic structure with the help of JSON: \"lists\": [ { \"name\": \"dogtaxonomy\", \"labels\": { \"de\": \"hunderassen\", \"en\": \"dogbreeds\" }, \"nodes\": [ { \"name\": \"canis lupus\", \"labels\": { \"en\": \"Wolf\", \"de\": \"Wolf\" }, \"comments\": { \"en\": \"the original wolf\", \"de\": \"der originale wolf\" }, \"nodes\": [ { \"name\": \"matris optima\", \"labels\": { \"en\": \"shepherddogs\", \"de\": \"sch\u00e4ferhunde\" } }, { \"name\": \"intermediate\", \"labels\": { \"en\": \"huntingdogs\", \"de\": \"jagdhunde\" } }, { \"name\": \"leiner\", \"labels\": { \"en\": \"greyhounds\", \"de\": \"windhunde\" } }, { \"name\": \"inostranzewi\", \"labels\": { \"en\": \"mastiffs\", \"de\": \"mastiffs\" } } ] } ] } ] As already mentioned before, the lists element is optional. If there are no lists, this element has to be omitted. Groups This object contains groups -definitions. This is (only) used to specify the permissions a user gets. A project may define user groups such as \"project-admins\", \"students\" etc. and give the members of each group individual permissions. A group -defintion has the following elements: - name : The name of the group. - description : Description of the purpose of the group. - selfjoin : True, if users are able to join the group; false, if an administrator must add the users. - status : Has the value true if the group is active and false if the group is not active. Example: \"groups\": [ { \"name\": \"biz-editors\", \"description\": \"Editors for the BiZ-project\", \"selfjoin\": false, \"status\": true } ], The groups element is optional and can therefore be left out. Users This object contains user -definitions. You can set user traits here. A user has the following elements: - username : The short username for the login. Similar to a nickname. - email : Unique email that identifies the user. - givenName : Firstname of the user. - familyName : Surname of the user. - password : Password of the user. - lang : The preferred language of the user: \"en\", \"de\", \"fr\", \"it\" [optional, default: \"en\"]. - projects : List of projects the user belongs to. Example: \"users\": [ { \"username\": \"bizedit\", \"email\": \"bizedit@test.org\", \"givenName\": \"biz-given\", \"familyName\": \"biz-family\", \"password\": \"biz1234\", \"lang\": \"en\", \"groups\": [\":biz-editors\"], \"projects\": [\":admin\",\"anything:member\"] } ], The users element is optional and can therefore be omitted. Ontology Most of the definitions for our ontology will be done under the category \"ontology\": {} inside of the curly brackets. This is the core of the ontology definition. We know, you've already read a whole lot of text so far, but this section is probably the most important one. Firstly lets talk about what an ontology actually is. This is necessary so that afterwards it will get easier to understand, what the different fields of the ontology definition do. An ontology is a formally ordered representation of a set of terminologies. Dependencies, relationships and relations between the individual components of the set are recorded and noted in a logical, formal language. In contrast to a taxonomy, which defines a mere hierarchical structure within a range of terms, an ontology is much more a network of information of logical dependencies of term elements. A full-fledged ontology thus has to offer at least two things: a set of objects or terms (called resources) - the actual elements of the terminology set - as well as dependency rules that describe the dependencies of the individual resources between one and another (called properties). To fully capture everything an ontology has to provide, we use four different elements that describe the resources as well as the dependencies inside our ontology. They are: name label properties resources Example: \"ontology\": { \"name\": \"seworon\", \"label\": \"Secrets of the world ontology\", \"properties\": [\u2026], \"resources\": [\u2026] } Now lets see what each field does. Name First of all, our overall ontology needs a name. After all, we want to create a ontology about a specific subject or set of terms. As a \"speciality\", the name of the ontology has to be a NCNAME conformant name that can be used as prefix. NCNAME means that it has to be a single word without any special characters (like e.g. \" . : ! ? # + (...) \") and without any blanks. Label Since the \"name\" of your ontology needs to be in this special format, we like to have a human readable and understandable name of the ontology. This is done in the \"label\". Properties At first, it seems a bit illogical to have to define the properties before the resources. After all, a property always describes the characteristics of a resource . However, it is necessary to define the properties before the resources. The reason for that is that a property - a dependency between resources - can be used in our program not only for a single resource but for several. If we would e.g. have a property that describes \"is descendent of\", we can use this property not only to describe the family relations of a human family but at the same time use the same property to describe the relations of e.g. an animal family. A properties-array describes all the properties that are used for our terminology space. It's all the properties that describe all the possible connections and dependencies between our entire set of terms. The following should also be mentioned: We are restricted to a list of properties, we can choose from. We can't create our own \"new\" properties. However, the list is exceptionally large and should cover all the needs for properties we want to choose for our ontology. A property has mandatory and optional fields. The following fields are mandatory: - name - labels - object - gui_element The following fields are optional (can be omitted): - super - gui_attributes name A name for the property e.g. \"idesof\" labels Similar to the name property, the label describes the property. In contrast to the name, which serves as a pure abbreviation, the label is human readable. Thus, use language dependent, human readable names e.g. \"is descendent of\". The labels-field has the following form: { \"<lang>\": \"<value>\", \u2026} where <lang> is either \"en\", \"de\", \"fr\" or \"it\", and <value> is a string. object The \"object\" defines the data type of the value that the property will store. The following object types are allowed: - TextValue : Represents a text that may contain standoff markup gui_elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes are: gui_attributes : - maxlength=integer (optional): Maximal length (number of character accepted) - size=integer (optional): Size (width) of widget - Textarea : A GUI element for TextValue . Presents a multiline textentry box. The optional attributes are: gui_attributes : - cols=integer (optional): Number of cols of the textarea - rows=integer (optional): Number of rows of the textarea - width=percent (optional): Width of the field on screen - wrap=soft|hard (optional): Wrapping of text - Richtext : A GUI element for TextValue . Provides a richtext editor. - gui_attributes : No attributes ColorValue : A string in the form \"#rrggbb\" (standard web color format) gui-elements / gui_attributes : Colorpicker : The only GUI element for ColorValue . It's used to choose a color. gui_attributes : ncolors=integer (mandatory): Number of colors the color picker should present. DateValue : represents a date. It's a string with the format calendar:start:end calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year. If only the year and month is given, the precision is to the month. end is optional if the date represents a clearly defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means anytime in between 1925 and the 22nd March 1927. gui-elements / gui_attributes : - Date : The only GUI element for DateValue . A date picker gui. gui_attributes : No attributes DecimalValue : A number with decimal point gui-elements / gui_attributes : Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. gui_attributes : max=decimal (mandatory): Maximal value min=decimal (mandatory): Minimal value SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field GeomValue : Represents a geometrical shape as JSON. gui-elements / gui_attributes : Geometry : Not Yet Implemented. gui_attributes : No attributes SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field GeonameValue : Represents a location ID in geonames.org gui-elements / gui_attributes : Geonames : The only GUI element for GeonameValue . Interfaces are with geonames.org and it allows to select a location. gui_attributes : No attributes IntValue : Represents an integer value gui-elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. gui_attributes : max=integer (optional): Maximal value min=integer (optional): Minimal value BooleanValue : Represents a Boolean (\"true\" or \"false) gui-elements / gui_attributes : Checkbox : A GUI element for BooleanValue . gui_attributes : No attributes UriValue : : Represents an URI gui-elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field IntervalValue : Represents a time-interval gui-elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field Interval : Not Yet Implemented. gui_attributes : No attributes ListValue : Represents a node of a (possibly hierarchical) list gui-elements / gui_attributes : Radio : A GUI element for ListValue . A set of radio buttons. This works only with flat lists! gui_attributes : hlist=<list-name> (mandatory): The reference of a list root node List : A GUI element for ListValue . A list of values to select one from. gui_attributes : hlist=<list-name> (mandatory): The reference of a list root node Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. gui_attributes : hlist=<list-name> (mandatory): The reference of a list root node LinkValue : Represents a link to another resource gui-elements/gui_attributes : Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. It has one gui_attribute that indicates how many properties of the found resources should be indicated. It's mandatory! gui_attributes : numprops=integer (mandatory): While dynamically displaying the search result, the number of properties that should be displayed. -- : Not yet documented gui-elements/gui_attributes : Fileupload : not yet documented! gui_attributes : No attributes Like already mentioned before: The following two fields are optional (can be omitted): super A property must be derived from at least one base property. The most generic base property that Knora offers is hasValue . In addition the property may be a subproperty of properties defined in external ontologies. In this case the qualified name - including the prefix - has to be given. The following base properties are defined by Knora: - hasValue : This is the most generic base. - hasLinkTo : This value represents a link to another resource. You have to indicate the \" object \" as a prefixed IRI that identifies the resource class this link points to. - hasColor : Defines a color value ( ColorValue ) - hasComment : Defines a \"standard\" comment - hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue - isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is part of a \"book\". - isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. - isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. - seqnum : An integer that is used to define a sequence number in an ordered set of instances. To sum the Properties section up, here we have an example for a complete properties definition: \"properties\": [ { \"name\": \"schulcode\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Schulcode\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } }, { \"name\": \"schulname\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Name der Schule\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } } ] Resources The resource classes are the primary entities of the data model. They are the actual objects/terms inside our terminology space. A resource class is a template for the representation of a real object that is represented in the DaSCH database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource needs to have the following fields: name A name for the resource. label The string displayed of the resource is being accessed. super A resource class is always derived from an other resource. The most generic resource class Knora offers is \"Resource\" . The following parent predefined resources are provided by Knora: - Resource : A generic \"thing\" that represents an item from the real world - StillImageRepresentation : An object that is connected to a still image - TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) - AudioRepresentation : An object representing audio data (Not Yet Implemented) - DDDRepresentation : An object representing a 3-D representation (Not Yet Implemented) - DocumentRepresentation : An object representing an opaque document (e.g. a PDF) - MovingImageRepresentation : An object representing a moving image (video, film) - Annotation : A predefined annotation object. It has the following properties defined: - hasComment (1-n), isAnnotationOf (1) - LinkObj : A resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n), hasLinkTo (1-n) - Region : Represents a simple region. The class has the following properties: hasColor (1), isRegionOf (1) hasGeometry (1), isRegionOf (1), hasComment (0-n) cardinalities : Array of references to the properties that the resource may hold including the cardinality. A cardinality has the following properties: propname : The name of the property. If it's used in the form \":\"propname, the current ontology is referenced. If the \":\" is omitted, a Knora standard ontology is referenced, otherwise the full prefix of the ontology has to be used. gui_order : An integer number which will help the GUI to display the properties in the desired order cardinality : Indicates how often a given property may occur. The possible values are: \"1\": Exactly once (mandatory one value and only one) \"0-1\": The value may be omitted, but can occur only once \"1-n\": At least one value must be present. But multiple values may be present \"0-n\": The value may be omitted, but may also occur multiple times Example for a resource definition: \"resources\": [ { \"name\": \"Schule\", \"super\": \"Resource\", \"labels\": { \"de\": \"Schule\" }, \"cardinalities\": [ { \"propname\": \":schulcode\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":schulname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":bildungsgang\", \"gui_order\": 3, \"cardinality\": \"1\" } ] }] Fully fleshed out example ontology Finally, we show a complete example of an ontology definition. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [{ \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [{ \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [{ \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] }], \"ontologies\": [{ \"name\": \"teimp\", \"label\": \"Test import ontology\", \"properties\": [{ \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 32 } }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 64 } }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\" }, { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 64, \"maxlength\": 64 } }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": { \"hlist\": \"orgtype\" } } ], \"resources\": [{ \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"cardinalities\": [{ \"propname\": \":firstname\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":lastname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":member\", \"gui_order\": 3, \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"cardinalities\": [{ \"propname\": \":name\", \"gui_order\": 1, \"cardinality\": \"1-n\" }, { \"propname\": \":orgtype\", \"gui_order\": 2, \"cardinality\": \"1-n\" } ] } ] }] } }","title":"knora-create-onto"},{"location":"create_onto/#knora-create-onto","text":"The command create-onto can be used to upload a data model (ontology) from a JSON file to a knora server, or to dump a data model from a knora server to a JSON file. knora-create-onto create creates an ontology. Furthermore, the script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model. knora-create-onto get reads an ontology from a server and creates a JSON file that can be used again by knora-create-onto create to implement the data model on another server","title":"knora-create-onto"},{"location":"create_onto/#usage","text":"","title":"Usage"},{"location":"create_onto/#create-an-ontology-on-a-server","text":"$ knora-create-onto create [options] data_model_definition.json The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. \"-V\" | \"--validate\" : If this flag is set, only the validation of the JSON runs. \"-l\" | \"--lists\" : This only creates the lists using a simplified schema . Please note that in this case the project must exist. \"-v\" | \"--verbose\" : Print out some information about progress So for example you can have the command: $ knora-create-onto create -s https://api.server data_model_definition.json","title":"Create an ontology on a server"},{"location":"create_onto/#get-an-ontology-from-a-server","text":"$ knora-create-onto get [options] output-file The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. \"-P project\" | \"--project shortcode|shortname|iri\" : Shortcode, shortname or iri of project \"-v\" | \"--verbose\" : Print out some information about progress","title":"Get an ontology from a server"},{"location":"create_onto/#json-ontology-definition-format","text":"","title":"JSON ontology definition format"},{"location":"create_onto/#introduction","text":"This document contains all the information you need to create an ontology that's used by Knora. In the first section you find a rough overview of the ontology definition, all the necessary components with a definition and a short example of the definition.","title":"Introduction"},{"location":"create_onto/#a-short-overview","text":"In the following section, you find all the mentioned parts with a detailed explanation. Right at the beginning we look at the basic fields that belong to an ontology definition. This serves as an overview for you to which you can return at any time while you read the description. A complete ontology definition looks like this: { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0123\", \"shortname\": \"BiZ\", \"longname\": \"Bildung in Zahlen\", \"descriptions\": {}, \"keywords\": [], \"lists\": [], \"groups\": [], \"users\": [], \"ontologies\": [] } } As you can see, only two umbrella terms define our ontology: the \"prefixes\" object and the \"project\" object. In the following we take a deeper look into both of them since, as you can see in the example above, both objects have further fine grained definition levels.","title":"A short overview"},{"location":"create_onto/#prefixes-object","text":"The \"prefixes\" object contains - as you may already have guessed by the name - the prefixes of external ontologies that are also used in the current project. All prefixes are composed of a keyword, followed by its iri. This is used as a shortcut for later so that you don't always have to specify the full qualified iri but can use the much shorter keyword instead. That means that e.g. instead of addressing a property called \"familyname\" via http://xmlns.com/foaf/0.1/familyName you can simply use foaf:familyName. As you can see in the example below, you can have more then one prefix too. In the example we have \"foaf\" as well as \"dcterms\" as our prefixes. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" } }","title":"\"Prefixes\" object"},{"location":"create_onto/#project-object","text":"Right after the \"prefix\" object the \"project\" object has to follow, which contains all resources and properties of the ontology. The \"project\" object is the bread and butter of the ontology. All its important properties are specified therein. As you saw in the complete ontology definition in the beginning, the project definitions requires exactly all of the following datafields: shortcode shortname longname keywords ontologies Whereas the following fields are optional (if one or more of these fields are not used, it must be omitted): descriptions lists groups users So a simple example definition of the \"project\" object could look like this: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" , \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project\", \"de\": \"Dies ist ein einfaches Beispielprojekt\" } \"keywords\": [\"example\", \"simple\"], \"lists\": [\u2026], \"groups\": [\u2026], \"users\": [\u2026], \"ontology\": {\u2026} }","title":"\"Project\" object"},{"location":"create_onto/#simple-keyvalue-pairs","text":"At that point we will go through all of this step by step and take a more in depth view on the individual fields of the \"project\" object. The first four fields of the \"project\" object are \"key\"/\"value\" pairs. Therefore they are quite simple.","title":"Simple key/value pairs"},{"location":"create_onto/#shortcode","text":"It's a hexadecimal string in the range between \"0000\" and \"FFFF\" that's used to uniquely identifying the project. The shortcode has to be provided by the DaSCH.","title":"Shortcode"},{"location":"create_onto/#shortname","text":"This is a short name (string) for the project. It's ment to be like a nickname. If the name of the project is e.g. \"Albus Percival Wulfric Dumbledore\", then the shortname for it could be \"Albi\".","title":"Shortname"},{"location":"create_onto/#longname","text":"A longer string that provides the full name of the project. In our example, the longname would be \"Albus Percival Wulfric Dumbledore\".","title":"Longname"},{"location":"create_onto/#descriptions","text":"The descriptions specify the content of the project in exactly one or more strings. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as a JSON object with the language as \"key\" and the description as \"value\". See the example above inside the curly brackets after \"descriptions\" to see what that means.","title":"Descriptions"},{"location":"create_onto/#keyobject-pairs","text":"The following fields are not simple \"key\"/\"value\" pairs. They do have a key, the value however is another object and therefore has an internal structure. Due to the increased complexity of these objects, they are looked at in more detail.","title":"Key/object pairs"},{"location":"create_onto/#keywords","text":"An array of keywords is used to roughly describe the project in single words. A project that deals e.g. with old monastery manuscripts could possess the keywords \"monastery\", \"manuscripts\", \"medieval\", (...). The array can be empty as well e.i. \"keywords\": [].","title":"Keywords"},{"location":"create_onto/#lists","text":"The list object is used to give the resources of the ontology a taxonomic quality. A taxonomy makes it possible to place a set of objects in subcategories. The big advantage of a taxonomic structure is that the user can subcategorize the objects. This allows the user to formulate his search requests more or less specifically as desired. Suppose an ontology is about the animal kingdom. The individual resources of our ontology symbolize individual animal species. It would now be practical if we could search in a query only for animals that belong to the class of mammals. Or one would wish to find only invertebrates. Or one would like to find very specifically only all kinds of small cats. The taxonomy, which is defined in the list object, makes this possible. A taxonomy is a hierarchical list of categories in a kind of tree structure. The taxonomy must be complete. This means that the entire set of resources can be mapped to the sub-categorization of the taxonomy. To come back to the previous example: It must not be possible that an animal within our resource set cannot be mapped to a subcategory of our taxonomy. The taxonomic-hirarchical structure is mapped using JSON. This is because JSON inherently implements a tree structure as well. The root of the taxonomy tree is always the name of the taxonomy. The root always stands alone at the top of the tree. It is followed by any number of levels, on which any number of subcategories can be placed. Suppose you want to build a taxonomy of dogs. The root would be the name of the taxonomy e.g. \"dogtaxonomy\". The next level on the hierarchy could be the wolf, because all dogs are descended from the wolf. So we have one element on root level - the name of the taxonomy, and one element on the next lower level, the wolf (Canis lupus). The wolf, in turn, has four closest relatives: the Matris Optima, the Intermediate, the Leiner and the Inostranzewi. Our taxonomy now looks as follows: On the root-plane we have the name of the taxonomy. As only child node we have the wolf on the second level. This node has four children on the third level. This taxonomy can be continued until we have categorized all kinds of dogs. As a side note: This dog taxonomy has been largely disproved in modern times, but is well suited to represent the structure of a list object. As already mentioned, the big advantage of a taxonomic categorization of resources is that we can search for dog breeds very concretely. We can generally filter for \"wolf\", where we find all dog breeds that exist. Or we can search specifically for \"Spaniel\", where we find all subcategories of Spaniel, such as Clumber Spaniel or Sussex Spaniel It is important to note that a flat taxonomy is also allowed. This means that a taxonomy from exactly two levels is allowed. We have a root level, with the name of the taxonomy, followed by a single level. Within this second level, any number of categories can coexist equally, but since they are on the same level, they are not hierarchically dependent on each other. For example, you could define a taxonomy \"soccer clubs\", which have the categories \"FCB\", \"FCZ\", (...) in the second level. FCBasel has no hierarchical connection to FCZ\u00fcrich. Their taxonomic structure is therefore flat. A resource can be assigned to a taxonomic node within its properties. So a resource \"animal\" can have the property \"mammal\". It is important to note that it is possible that a resource can have more than one taxonomic name. How many different taxonomic names a resource can have depends on its cardinality. If it has only the cardinality of 1, it can have only one taxonomic name. But if it has a cardinality of 10, the property can be used for ten different things - thus potentially supporting ten different taxonomic categories. This is the reason why a property can have more than one taxonomic name. A node of the Taxonomy may have the following elements: name : Name of the node. This should be unique for the given list. The name-element is optional. labels : Language dependent labels in the form { \"<lang>\": \"<label>, ... } . The labels-element is mandatory. It needs to specify at least one language. comments : Language dependent comments (optional) in the form { \"<lang>\": \"<comment>, ... } . The comments-element is optional. nodes : Array of subnodes. If you have a non-hierarchical taxonomy (i.e. a taxonomy with only 2 levels, the root level and another level), you don't have child nodes. Therefore the nodes element can be omitted in case of a flat taxonomy. Here is an example on how to build a taxonomic structure with the help of JSON: \"lists\": [ { \"name\": \"dogtaxonomy\", \"labels\": { \"de\": \"hunderassen\", \"en\": \"dogbreeds\" }, \"nodes\": [ { \"name\": \"canis lupus\", \"labels\": { \"en\": \"Wolf\", \"de\": \"Wolf\" }, \"comments\": { \"en\": \"the original wolf\", \"de\": \"der originale wolf\" }, \"nodes\": [ { \"name\": \"matris optima\", \"labels\": { \"en\": \"shepherddogs\", \"de\": \"sch\u00e4ferhunde\" } }, { \"name\": \"intermediate\", \"labels\": { \"en\": \"huntingdogs\", \"de\": \"jagdhunde\" } }, { \"name\": \"leiner\", \"labels\": { \"en\": \"greyhounds\", \"de\": \"windhunde\" } }, { \"name\": \"inostranzewi\", \"labels\": { \"en\": \"mastiffs\", \"de\": \"mastiffs\" } } ] } ] } ] As already mentioned before, the lists element is optional. If there are no lists, this element has to be omitted.","title":"Lists"},{"location":"create_onto/#groups","text":"This object contains groups -definitions. This is (only) used to specify the permissions a user gets. A project may define user groups such as \"project-admins\", \"students\" etc. and give the members of each group individual permissions. A group -defintion has the following elements: - name : The name of the group. - description : Description of the purpose of the group. - selfjoin : True, if users are able to join the group; false, if an administrator must add the users. - status : Has the value true if the group is active and false if the group is not active. Example: \"groups\": [ { \"name\": \"biz-editors\", \"description\": \"Editors for the BiZ-project\", \"selfjoin\": false, \"status\": true } ], The groups element is optional and can therefore be left out.","title":"Groups"},{"location":"create_onto/#users","text":"This object contains user -definitions. You can set user traits here. A user has the following elements: - username : The short username for the login. Similar to a nickname. - email : Unique email that identifies the user. - givenName : Firstname of the user. - familyName : Surname of the user. - password : Password of the user. - lang : The preferred language of the user: \"en\", \"de\", \"fr\", \"it\" [optional, default: \"en\"]. - projects : List of projects the user belongs to. Example: \"users\": [ { \"username\": \"bizedit\", \"email\": \"bizedit@test.org\", \"givenName\": \"biz-given\", \"familyName\": \"biz-family\", \"password\": \"biz1234\", \"lang\": \"en\", \"groups\": [\":biz-editors\"], \"projects\": [\":admin\",\"anything:member\"] } ], The users element is optional and can therefore be omitted.","title":"Users"},{"location":"create_onto/#ontology","text":"Most of the definitions for our ontology will be done under the category \"ontology\": {} inside of the curly brackets. This is the core of the ontology definition. We know, you've already read a whole lot of text so far, but this section is probably the most important one. Firstly lets talk about what an ontology actually is. This is necessary so that afterwards it will get easier to understand, what the different fields of the ontology definition do. An ontology is a formally ordered representation of a set of terminologies. Dependencies, relationships and relations between the individual components of the set are recorded and noted in a logical, formal language. In contrast to a taxonomy, which defines a mere hierarchical structure within a range of terms, an ontology is much more a network of information of logical dependencies of term elements. A full-fledged ontology thus has to offer at least two things: a set of objects or terms (called resources) - the actual elements of the terminology set - as well as dependency rules that describe the dependencies of the individual resources between one and another (called properties). To fully capture everything an ontology has to provide, we use four different elements that describe the resources as well as the dependencies inside our ontology. They are: name label properties resources Example: \"ontology\": { \"name\": \"seworon\", \"label\": \"Secrets of the world ontology\", \"properties\": [\u2026], \"resources\": [\u2026] } Now lets see what each field does.","title":"Ontology"},{"location":"create_onto/#name","text":"First of all, our overall ontology needs a name. After all, we want to create a ontology about a specific subject or set of terms. As a \"speciality\", the name of the ontology has to be a NCNAME conformant name that can be used as prefix. NCNAME means that it has to be a single word without any special characters (like e.g. \" . : ! ? # + (...) \") and without any blanks.","title":"Name"},{"location":"create_onto/#label","text":"Since the \"name\" of your ontology needs to be in this special format, we like to have a human readable and understandable name of the ontology. This is done in the \"label\".","title":"Label"},{"location":"create_onto/#properties","text":"At first, it seems a bit illogical to have to define the properties before the resources. After all, a property always describes the characteristics of a resource . However, it is necessary to define the properties before the resources. The reason for that is that a property - a dependency between resources - can be used in our program not only for a single resource but for several. If we would e.g. have a property that describes \"is descendent of\", we can use this property not only to describe the family relations of a human family but at the same time use the same property to describe the relations of e.g. an animal family. A properties-array describes all the properties that are used for our terminology space. It's all the properties that describe all the possible connections and dependencies between our entire set of terms. The following should also be mentioned: We are restricted to a list of properties, we can choose from. We can't create our own \"new\" properties. However, the list is exceptionally large and should cover all the needs for properties we want to choose for our ontology. A property has mandatory and optional fields. The following fields are mandatory: - name - labels - object - gui_element The following fields are optional (can be omitted): - super - gui_attributes name A name for the property e.g. \"idesof\" labels Similar to the name property, the label describes the property. In contrast to the name, which serves as a pure abbreviation, the label is human readable. Thus, use language dependent, human readable names e.g. \"is descendent of\". The labels-field has the following form: { \"<lang>\": \"<value>\", \u2026} where <lang> is either \"en\", \"de\", \"fr\" or \"it\", and <value> is a string. object The \"object\" defines the data type of the value that the property will store. The following object types are allowed: - TextValue : Represents a text that may contain standoff markup gui_elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes are: gui_attributes : - maxlength=integer (optional): Maximal length (number of character accepted) - size=integer (optional): Size (width) of widget - Textarea : A GUI element for TextValue . Presents a multiline textentry box. The optional attributes are: gui_attributes : - cols=integer (optional): Number of cols of the textarea - rows=integer (optional): Number of rows of the textarea - width=percent (optional): Width of the field on screen - wrap=soft|hard (optional): Wrapping of text - Richtext : A GUI element for TextValue . Provides a richtext editor. - gui_attributes : No attributes ColorValue : A string in the form \"#rrggbb\" (standard web color format) gui-elements / gui_attributes : Colorpicker : The only GUI element for ColorValue . It's used to choose a color. gui_attributes : ncolors=integer (mandatory): Number of colors the color picker should present. DateValue : represents a date. It's a string with the format calendar:start:end calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year. If only the year and month is given, the precision is to the month. end is optional if the date represents a clearly defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means anytime in between 1925 and the 22nd March 1927. gui-elements / gui_attributes : - Date : The only GUI element for DateValue . A date picker gui. gui_attributes : No attributes DecimalValue : A number with decimal point gui-elements / gui_attributes : Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. gui_attributes : max=decimal (mandatory): Maximal value min=decimal (mandatory): Minimal value SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field GeomValue : Represents a geometrical shape as JSON. gui-elements / gui_attributes : Geometry : Not Yet Implemented. gui_attributes : No attributes SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field GeonameValue : Represents a location ID in geonames.org gui-elements / gui_attributes : Geonames : The only GUI element for GeonameValue . Interfaces are with geonames.org and it allows to select a location. gui_attributes : No attributes IntValue : Represents an integer value gui-elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. gui_attributes : max=integer (optional): Maximal value min=integer (optional): Minimal value BooleanValue : Represents a Boolean (\"true\" or \"false) gui-elements / gui_attributes : Checkbox : A GUI element for BooleanValue . gui_attributes : No attributes UriValue : : Represents an URI gui-elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field IntervalValue : Represents a time-interval gui-elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : maxlength=integer (optional): The maximum number of characters accepted size=integer\" (optional): The size of the input field Interval : Not Yet Implemented. gui_attributes : No attributes ListValue : Represents a node of a (possibly hierarchical) list gui-elements / gui_attributes : Radio : A GUI element for ListValue . A set of radio buttons. This works only with flat lists! gui_attributes : hlist=<list-name> (mandatory): The reference of a list root node List : A GUI element for ListValue . A list of values to select one from. gui_attributes : hlist=<list-name> (mandatory): The reference of a list root node Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. gui_attributes : hlist=<list-name> (mandatory): The reference of a list root node LinkValue : Represents a link to another resource gui-elements/gui_attributes : Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. It has one gui_attribute that indicates how many properties of the found resources should be indicated. It's mandatory! gui_attributes : numprops=integer (mandatory): While dynamically displaying the search result, the number of properties that should be displayed. -- : Not yet documented gui-elements/gui_attributes : Fileupload : not yet documented! gui_attributes : No attributes Like already mentioned before: The following two fields are optional (can be omitted): super A property must be derived from at least one base property. The most generic base property that Knora offers is hasValue . In addition the property may be a subproperty of properties defined in external ontologies. In this case the qualified name - including the prefix - has to be given. The following base properties are defined by Knora: - hasValue : This is the most generic base. - hasLinkTo : This value represents a link to another resource. You have to indicate the \" object \" as a prefixed IRI that identifies the resource class this link points to. - hasColor : Defines a color value ( ColorValue ) - hasComment : Defines a \"standard\" comment - hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue - isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is part of a \"book\". - isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. - isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. - seqnum : An integer that is used to define a sequence number in an ordered set of instances. To sum the Properties section up, here we have an example for a complete properties definition: \"properties\": [ { \"name\": \"schulcode\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Schulcode\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } }, { \"name\": \"schulname\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Name der Schule\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } } ]","title":"Properties"},{"location":"create_onto/#resources","text":"The resource classes are the primary entities of the data model. They are the actual objects/terms inside our terminology space. A resource class is a template for the representation of a real object that is represented in the DaSCH database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource needs to have the following fields:","title":"Resources"},{"location":"create_onto/#name_1","text":"A name for the resource.","title":"name"},{"location":"create_onto/#label_1","text":"The string displayed of the resource is being accessed.","title":"label"},{"location":"create_onto/#super","text":"A resource class is always derived from an other resource. The most generic resource class Knora offers is \"Resource\" . The following parent predefined resources are provided by Knora: - Resource : A generic \"thing\" that represents an item from the real world - StillImageRepresentation : An object that is connected to a still image - TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) - AudioRepresentation : An object representing audio data (Not Yet Implemented) - DDDRepresentation : An object representing a 3-D representation (Not Yet Implemented) - DocumentRepresentation : An object representing an opaque document (e.g. a PDF) - MovingImageRepresentation : An object representing a moving image (video, film) - Annotation : A predefined annotation object. It has the following properties defined: - hasComment (1-n), isAnnotationOf (1) - LinkObj : A resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n), hasLinkTo (1-n) - Region : Represents a simple region. The class has the following properties: hasColor (1), isRegionOf (1) hasGeometry (1), isRegionOf (1), hasComment (0-n) cardinalities : Array of references to the properties that the resource may hold including the cardinality. A cardinality has the following properties: propname : The name of the property. If it's used in the form \":\"propname, the current ontology is referenced. If the \":\" is omitted, a Knora standard ontology is referenced, otherwise the full prefix of the ontology has to be used. gui_order : An integer number which will help the GUI to display the properties in the desired order cardinality : Indicates how often a given property may occur. The possible values are: \"1\": Exactly once (mandatory one value and only one) \"0-1\": The value may be omitted, but can occur only once \"1-n\": At least one value must be present. But multiple values may be present \"0-n\": The value may be omitted, but may also occur multiple times Example for a resource definition: \"resources\": [ { \"name\": \"Schule\", \"super\": \"Resource\", \"labels\": { \"de\": \"Schule\" }, \"cardinalities\": [ { \"propname\": \":schulcode\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":schulname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":bildungsgang\", \"gui_order\": 3, \"cardinality\": \"1\" } ] }]","title":"super"},{"location":"create_onto/#fully-fleshed-out-example-ontology","text":"Finally, we show a complete example of an ontology definition. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [{ \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [{ \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [{ \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] }], \"ontologies\": [{ \"name\": \"teimp\", \"label\": \"Test import ontology\", \"properties\": [{ \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 32 } }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 64 } }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\" }, { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 64, \"maxlength\": 64 } }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": { \"hlist\": \"orgtype\" } } ], \"resources\": [{ \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"cardinalities\": [{ \"propname\": \":firstname\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":lastname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":member\", \"gui_order\": 3, \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"cardinalities\": [{ \"propname\": \":name\", \"gui_order\": 1, \"cardinality\": \"1-n\" }, { \"propname\": \":orgtype\", \"gui_order\": 2, \"cardinality\": \"1-n\" } ] } ] }] } }","title":"Fully fleshed out example ontology"},{"location":"create_ontology/","text":"knora-create-ontology Creating an ontology with knora-create-ontology This script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model. Usage: $ knora-create-ontology data_model_definition.json It supports the foloowing options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: localhost:3333] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-v\" | \"--validate\" : If this flag is set, only the validation of the json is run \"-l\" | \"--lists\" : Only create the lists using simplyfied schema . Please note that in this case the project must exist. JSON ontology definition format The JSON file contains a first object an object with the prefixes for external ontologies that are being used, followed by the definition of the project wic h includes all resources and properties: Prefixes { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": {} } Project data The project definitions requires \"shortcode\" : A hexadecimal string in the range between \"0000\" and \"FFFF\" uniquely identifying the project. \"shortname\" : A short name (string) a \"longname\" : A longer string giving the full name for the project descriptions : Strings describing the projects content. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as JSON object with the language as key and the description as value. At least one description in one language is required. keywords : An array of keywords describing the project. lists : The definition of flat or hierarchical list (thesauri, controlled vocabularies) users : Array of user definitions that will be added ontology : The definition of the data model (ontology) This a project definition lokks like follows: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project with no value.\", \"de\": \"Dies ist ein einfaches, wertloses Beispielproject\" } \"keywords\": [\"example\", \"senseless\"], \"lists\": [], \"users\": [], \"ontology\": {} } Lists A List consists of a root node identifing the list and an array of subnodes. Each subnode may contain again subnodes (hierarchical list). A node has the following elements: name : Name of the node. Should be unique for the given list labels : Language dependent labels comments : language dependent comments (optional) nodes : Array of subnodes (optional \u2013 leave out if there are no subnodes) The lists object contains an array of lists. Here an example: \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Organisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ] the lists element is optional. Users This is an array of user -definitions. A user has the following elements: - username : The short username for login - email : Unique email that identifies the user - givenName : Firstname of the user - familyName : Name of the user - password : Clear initial password of the user - lang : The preferred language of the user: \"en\", \"de\", \"fr\", \"it\" [optional, default: \"en\"] - projadmin : True, if the user should be a project administrator [optional, default: False] - sysadmin : True, if the user should be a system administrator [optional, default: False] Ontology The ontology object contains the definition of the data model. The ontology has the following elemens: name : The name of the ontology. This has to be a NCNAME conformant name that can be use as prefix! label : Human readable and understandable name of the ontology resources : Array defining the resources (entities) of the data model \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [] } Resources The resource classes are the primary entities of the data model. A resource class is a template for the representation of a real object that is represented in the DaSCh database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource consists of the following definitions: name : A name for the resource label : The string displayed of the resource is being accessed super : A resource class is always derived from an other resource. The most generic resource class Knora offers is \"Resource\" . The following parent predefined resources are provided by knora: Resource : A generic \"thing\" that represents an item from the reral world StillImageRepresentation : An object that is connected to a still image TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) AudioRepresentation : An object representing audio data (Not Yet Implemented) DDDRepresentation : An object representing a 3d representation (Not Yet Implemented) DocumentRepresentation : An object representing a opaque document (e.g. a PDF) MovingImageRepresentation : An object representing a moving image (video, film) Annotation : A predefined annotation object. It has the following properties defined: hasComment (1-n), isAnnotationOf (1) LinkObj : An resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n), hasLinkTo (1-n) Region : Represents a simple region. The class has the following properties: hasColor (1), isRegionOf (1) hasGeometry (1), isRegionOf (1), hasComment (0-n) However, a resource my be derived from a resource class in another ontology within the same project or from another resource class in the same ontology. In this case the reference has to have the form prefix : resourceclassname . - labels : Language dependent, human readable names - comments : Language dependend comments (optional) - properties : Array of property definition for this resource class. Example: \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [\u2026] } Properties Properties are the definition of the data fields a resource class may or must have. The properties object has the following fields: name : A name for the property super : A property has to be derived from at least one base property. The most generic base property Knora offers is hasValue . In addition the property may by als a subproperty of properties defined in external ontologies. In this case the qualified name including the prefix has to be given. The following base properties are definied by Knora: hasValue : This is the most generic base. hasLinkTo : This value represents a link to another resource. You have to indicate the the \" object \" as a prefixed IRI that identifies the resource class this link points to. hasColor : Defines a color value ( ColorValue ) hasComment : Defines a \"standard\" comment hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is a prt of a \"book\". isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. seqnum : An integer that is used to define a sequence number in an ordered set of instances. object : The \"object\" defines the type of the value that the property will store. The following object types are allowed: TextValue : Represents a text that may contain standoff markup ColorValue : A string in the form \"#rrggbb\" (standard web color format) DateValue : represents a date. It is a string having the format \"_calendar\":\"start\":\"end\" calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year, of only the year and month are given, the precision is to a month. end is optional if the date represents a clearely defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means antime in between 1925 and the 22nd March 1927. DecimalValue : a number with decimal point GeomValue : Represents a geometrical shape as JSON. GeonameValue : Represents a location ID in geonames.org IntValue : Represents an integer value BooleanValue : Represents a Boolean (\"true\" or \"false) UriValue : : Represents an URI IntervalValue : Represents a time-interval ListValue : Represents a node of a (possibly hierarchical) list labels : Language dependent, human readable names gui_element : The gui_element is \u2013 strictly seen \u2013 not part of the data. It gives the generic GUI a hint about how the property should be presented to the used. Each gui_element may have associated gui_attributes which contain further hints. There are the following gui_elements available: Colorpicker : The only GUI element for ColorValue . Let's You pick a color. It requires the attribute \"ncolors=integer\" Date : The only GUI element for DateValue . A date picker gui. No attributes Geometry : Not Yet Implemented. Geonames : The only GUI element for GeonameValue . Interfaces with geonames.org and allows to select a location Interval : Not Yet Implemented. List : A list of values. The Attribute \"hlist= \" is mandatory! Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. The Attribute \"hlist= \" is mandatory! Radio : A GUI element for ListValue . A set of radio buttons. The Attribute \"hlist= \" is mandatory! SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. Textarea : A GUI element for TextValue . Presents a multiline textentry box. Optional attributes are \"cols=integer\", \"rows=integer\", \"width=percent\" and \"wrap=soft|hard\". Richtext : A GUI element for TextValue . Provides a richtext editor. Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. The Attribute \"numprops=integer\" indicates how many properties of the found resources should be indicated. It's mandatory! Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. The attributes \"max=decimal\" and \"min=decimal\" are mandatory! Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. Checkbox : A GUI element for BooleanValue . Fileupload : not yet documented! gui_attributes : See above cardinality : The cardinality indicates how often a given property may occur. The possible values are: \"1\": Exactly once (mandatory one value and only one) \"0-1\": The value may be omitted, but can occur only once \"1-n\": At least one value must be present. But multiple values may be present. \"0-n\": The value may be omitted, but may also occur multiple times. A complete example for a full ontology { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ], \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [ { \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=32\"], \"cardinality\": \"1\" }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=64\"], \"cardinality\": \"1\" }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\", \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"properties\": [ { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=64\", \"maxlength=64\"], \"cardinality\": \"1-n\" }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": [\"hlist=orgtype\"], \"cardinality\": \"1-n\" } ] } ] } } } JSON for lists only The JSON schema for uploading hierarchical lists only is simplyfied: { \"project\": { \"shortcode\": \"abcd\", \"lists\": [] } } The definition of the lists is the same as in the full upload of an ontology! A full example for creating lists only The following JSON definition assumes that there is a project with the shortcode 0808 . { \"project\": { \"shortcode\": \"0808\", \"lists\": [ { \"name\": \"test1\", \"labels\": { \"de\": \"TEST1\" }, \"nodes\": [ { \"name\": \"A\", \"labels\": { \"de\": \"_A_\" } }, { \"name\": \"B\", \"labels\": { \"de\": \"_B_\" }, \"nodes\": [ { \"name\": \"BA\", \"labels\": { \"de\": \"_BA_\" } }, { \"name\": \"BB\", \"labels\": { \"de\": \"_BB_\" } } ] }, { \"name\": \"C\", \"labels\": { \"de\": \"_C_\" } } ] } ] } }","title":"Create ontology"},{"location":"create_ontology/#knora-create-ontology","text":"Creating an ontology with knora-create-ontology This script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model.","title":"knora-create-ontology"},{"location":"create_ontology/#usage","text":"$ knora-create-ontology data_model_definition.json It supports the foloowing options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: localhost:3333] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-v\" | \"--validate\" : If this flag is set, only the validation of the json is run \"-l\" | \"--lists\" : Only create the lists using simplyfied schema . Please note that in this case the project must exist.","title":"Usage:"},{"location":"create_ontology/#json-ontology-definition-format","text":"The JSON file contains a first object an object with the prefixes for external ontologies that are being used, followed by the definition of the project wic h includes all resources and properties:","title":"JSON ontology definition format"},{"location":"create_ontology/#prefixes","text":"{ \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": {} }","title":"Prefixes"},{"location":"create_ontology/#project-data","text":"The project definitions requires \"shortcode\" : A hexadecimal string in the range between \"0000\" and \"FFFF\" uniquely identifying the project. \"shortname\" : A short name (string) a \"longname\" : A longer string giving the full name for the project descriptions : Strings describing the projects content. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as JSON object with the language as key and the description as value. At least one description in one language is required. keywords : An array of keywords describing the project. lists : The definition of flat or hierarchical list (thesauri, controlled vocabularies) users : Array of user definitions that will be added ontology : The definition of the data model (ontology) This a project definition lokks like follows: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project with no value.\", \"de\": \"Dies ist ein einfaches, wertloses Beispielproject\" } \"keywords\": [\"example\", \"senseless\"], \"lists\": [], \"users\": [], \"ontology\": {} }","title":"Project data"},{"location":"create_ontology/#lists","text":"A List consists of a root node identifing the list and an array of subnodes. Each subnode may contain again subnodes (hierarchical list). A node has the following elements: name : Name of the node. Should be unique for the given list labels : Language dependent labels comments : language dependent comments (optional) nodes : Array of subnodes (optional \u2013 leave out if there are no subnodes) The lists object contains an array of lists. Here an example: \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Organisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ] the lists element is optional.","title":"Lists"},{"location":"create_ontology/#users","text":"This is an array of user -definitions. A user has the following elements: - username : The short username for login - email : Unique email that identifies the user - givenName : Firstname of the user - familyName : Name of the user - password : Clear initial password of the user - lang : The preferred language of the user: \"en\", \"de\", \"fr\", \"it\" [optional, default: \"en\"] - projadmin : True, if the user should be a project administrator [optional, default: False] - sysadmin : True, if the user should be a system administrator [optional, default: False]","title":"Users"},{"location":"create_ontology/#ontology","text":"The ontology object contains the definition of the data model. The ontology has the following elemens: name : The name of the ontology. This has to be a NCNAME conformant name that can be use as prefix! label : Human readable and understandable name of the ontology resources : Array defining the resources (entities) of the data model \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [] }","title":"Ontology"},{"location":"create_ontology/#resources","text":"The resource classes are the primary entities of the data model. A resource class is a template for the representation of a real object that is represented in the DaSCh database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource consists of the following definitions: name : A name for the resource label : The string displayed of the resource is being accessed super : A resource class is always derived from an other resource. The most generic resource class Knora offers is \"Resource\" . The following parent predefined resources are provided by knora: Resource : A generic \"thing\" that represents an item from the reral world StillImageRepresentation : An object that is connected to a still image TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) AudioRepresentation : An object representing audio data (Not Yet Implemented) DDDRepresentation : An object representing a 3d representation (Not Yet Implemented) DocumentRepresentation : An object representing a opaque document (e.g. a PDF) MovingImageRepresentation : An object representing a moving image (video, film) Annotation : A predefined annotation object. It has the following properties defined: hasComment (1-n), isAnnotationOf (1) LinkObj : An resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n), hasLinkTo (1-n) Region : Represents a simple region. The class has the following properties: hasColor (1), isRegionOf (1) hasGeometry (1), isRegionOf (1), hasComment (0-n) However, a resource my be derived from a resource class in another ontology within the same project or from another resource class in the same ontology. In this case the reference has to have the form prefix : resourceclassname . - labels : Language dependent, human readable names - comments : Language dependend comments (optional) - properties : Array of property definition for this resource class. Example: \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [\u2026] }","title":"Resources"},{"location":"create_ontology/#properties","text":"Properties are the definition of the data fields a resource class may or must have. The properties object has the following fields: name : A name for the property super : A property has to be derived from at least one base property. The most generic base property Knora offers is hasValue . In addition the property may by als a subproperty of properties defined in external ontologies. In this case the qualified name including the prefix has to be given. The following base properties are definied by Knora: hasValue : This is the most generic base. hasLinkTo : This value represents a link to another resource. You have to indicate the the \" object \" as a prefixed IRI that identifies the resource class this link points to. hasColor : Defines a color value ( ColorValue ) hasComment : Defines a \"standard\" comment hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is a prt of a \"book\". isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. seqnum : An integer that is used to define a sequence number in an ordered set of instances. object : The \"object\" defines the type of the value that the property will store. The following object types are allowed: TextValue : Represents a text that may contain standoff markup ColorValue : A string in the form \"#rrggbb\" (standard web color format) DateValue : represents a date. It is a string having the format \"_calendar\":\"start\":\"end\" calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year, of only the year and month are given, the precision is to a month. end is optional if the date represents a clearely defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means antime in between 1925 and the 22nd March 1927. DecimalValue : a number with decimal point GeomValue : Represents a geometrical shape as JSON. GeonameValue : Represents a location ID in geonames.org IntValue : Represents an integer value BooleanValue : Represents a Boolean (\"true\" or \"false) UriValue : : Represents an URI IntervalValue : Represents a time-interval ListValue : Represents a node of a (possibly hierarchical) list labels : Language dependent, human readable names gui_element : The gui_element is \u2013 strictly seen \u2013 not part of the data. It gives the generic GUI a hint about how the property should be presented to the used. Each gui_element may have associated gui_attributes which contain further hints. There are the following gui_elements available: Colorpicker : The only GUI element for ColorValue . Let's You pick a color. It requires the attribute \"ncolors=integer\" Date : The only GUI element for DateValue . A date picker gui. No attributes Geometry : Not Yet Implemented. Geonames : The only GUI element for GeonameValue . Interfaces with geonames.org and allows to select a location Interval : Not Yet Implemented. List : A list of values. The Attribute \"hlist= \" is mandatory! Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. The Attribute \"hlist= \" is mandatory! Radio : A GUI element for ListValue . A set of radio buttons. The Attribute \"hlist= \" is mandatory! SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. Textarea : A GUI element for TextValue . Presents a multiline textentry box. Optional attributes are \"cols=integer\", \"rows=integer\", \"width=percent\" and \"wrap=soft|hard\". Richtext : A GUI element for TextValue . Provides a richtext editor. Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. The Attribute \"numprops=integer\" indicates how many properties of the found resources should be indicated. It's mandatory! Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. The attributes \"max=decimal\" and \"min=decimal\" are mandatory! Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. Checkbox : A GUI element for BooleanValue . Fileupload : not yet documented! gui_attributes : See above cardinality : The cardinality indicates how often a given property may occur. The possible values are: \"1\": Exactly once (mandatory one value and only one) \"0-1\": The value may be omitted, but can occur only once \"1-n\": At least one value must be present. But multiple values may be present. \"0-n\": The value may be omitted, but may also occur multiple times.","title":"Properties"},{"location":"create_ontology/#a-complete-example-for-a-full-ontology","text":"{ \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ], \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [ { \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=32\"], \"cardinality\": \"1\" }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=64\"], \"cardinality\": \"1\" }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\", \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"properties\": [ { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=64\", \"maxlength=64\"], \"cardinality\": \"1-n\" }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": [\"hlist=orgtype\"], \"cardinality\": \"1-n\" } ] } ] } } }","title":"A complete example for a full ontology"},{"location":"create_ontology/#json-for-lists-only","text":"The JSON schema for uploading hierarchical lists only is simplyfied: { \"project\": { \"shortcode\": \"abcd\", \"lists\": [] } } The definition of the lists is the same as in the full upload of an ontology!","title":"JSON for lists only"},{"location":"create_ontology/#a-full-example-for-creating-lists-only","text":"The following JSON definition assumes that there is a project with the shortcode 0808 . { \"project\": { \"shortcode\": \"0808\", \"lists\": [ { \"name\": \"test1\", \"labels\": { \"de\": \"TEST1\" }, \"nodes\": [ { \"name\": \"A\", \"labels\": { \"de\": \"_A_\" } }, { \"name\": \"B\", \"labels\": { \"de\": \"_B_\" }, \"nodes\": [ { \"name\": \"BA\", \"labels\": { \"de\": \"_BA_\" } }, { \"name\": \"BB\", \"labels\": { \"de\": \"_BB_\" } } ] }, { \"name\": \"C\", \"labels\": { \"de\": \"_C_\" } } ] } ] } }","title":"A full example for creating lists only"},{"location":"knora_console/","text":"knora-console Introduction The knora-console-app is a small, gui-based app to manipulate projects, users, groups and data models (ontologies). Many of the fields allow to enter data for different languages (en, de, fr, it). In these cases at least one language field should be provided with the appropriae data. The field \"No lang\" should not be used! It is only provided for backwards compatibility. The command knora-console launches a GUI based app that allows to manipulate a data model on a live server: Connection to server In order to open the connection to a server, select from the menu Connection -> Open connection... and enter the server and credentials: The app then connects to the server and loads the data. Project Tab The project tab lists all available project. Below the list, there ate three buttons: edit : allows to edit the metadata of the selected project new : allows to create a new project delete : delete an existing project. This button just marks the project as \"not active\", but does not erase the project data from the server! Project Metadata The project metadata consists of the following fields: Shortcode : A short code consisting of 4 hexadecimal number assigned by DaSCH to the project Shortname : A short name (acronym) of the project (must be unique), e.g. \"mls\" Longname : A long(er) title of he project, e.g. \"Musikalischs Lexikon der Schweiz\" Description : A description of the project describing the context of the data. Please note that the description should be assigned to at least one language, but more than one language is supported! The field \"No lang\" should not be used (is there for backwards compatibility). Keywords : Comma separated list of keywords. Selfjoin : If checked, selfjoin of users is allowd Status : If checked, the status is \"active\" Edit / New project Modifying an existing or creating a new project use the same dialog window with the same fields. If a field is changed the [X]-Button on the right side becomes active. Pressing this button restores the original value of the field. Fields that are grayed out cannot be modifyed (blocked by the Knora backend) List Tab Lists represent hierarchical taxonomies and are defined within the context of a specific class. Each entry is represented by a node that can have children nodes. The root node holds the list name and description The list tab displays all lists available. The display can be filtered by project to show only the lists defined by one specific project. New List In order to create a new list, ou have first to create a new root note. Click in the List-tab the new button to open the dialog window for entering the data of the new list root node: The dialog has the following fields: Project : Select the project the list belongs to Label : The name of the list as given to the human reader Name : A name that will be used referencing the list programmatically (upload scripts, tools etc.) Comment : Additional information about the list The next step is to add nodes. Close the dialog, select the new list and then click onto the edit button Edit List Clicking on the edit button opens the dialog to modify and/or add nodes. The dialog consists of two parts: On the left side, the hierarchical structure of the list is displayed as tree. Each node can be selected. on the right side, the metadata of the selected node is shown There are two options: Modify Node Modify or complete the data of the selected list node and then press the Save button: Add Node Below In order to add a child node, select the parent node. Then click on the Add new node below.. button. A new node entry dialog will open to be filled out. Groups Tab Groups are used for the permission concept of knora. A group is associated with permissions, and users are part of one or many groups (or may not be part of any group). A group is always associated with a specific project. To add or modify a group, the group dialog is used: The group dialog has the following fields: Name : Name of the group Description : A short description of the purpose of the group Project : The project the group is associated with (Cannot be changed after creation) . Selfjoin : If checked, a user may join a group on it's own Status : Check for making the group active","title":"knora-console"},{"location":"knora_console/#knora-console","text":"","title":"knora-console"},{"location":"knora_console/#introduction","text":"The knora-console-app is a small, gui-based app to manipulate projects, users, groups and data models (ontologies). Many of the fields allow to enter data for different languages (en, de, fr, it). In these cases at least one language field should be provided with the appropriae data. The field \"No lang\" should not be used! It is only provided for backwards compatibility. The command knora-console launches a GUI based app that allows to manipulate a data model on a live server:","title":"Introduction"},{"location":"knora_console/#connection-to-server","text":"In order to open the connection to a server, select from the menu Connection -> Open connection... and enter the server and credentials: The app then connects to the server and loads the data.","title":"Connection to server"},{"location":"knora_console/#project-tab","text":"The project tab lists all available project. Below the list, there ate three buttons: edit : allows to edit the metadata of the selected project new : allows to create a new project delete : delete an existing project. This button just marks the project as \"not active\", but does not erase the project data from the server!","title":"Project Tab"},{"location":"knora_console/#project-metadata","text":"The project metadata consists of the following fields: Shortcode : A short code consisting of 4 hexadecimal number assigned by DaSCH to the project Shortname : A short name (acronym) of the project (must be unique), e.g. \"mls\" Longname : A long(er) title of he project, e.g. \"Musikalischs Lexikon der Schweiz\" Description : A description of the project describing the context of the data. Please note that the description should be assigned to at least one language, but more than one language is supported! The field \"No lang\" should not be used (is there for backwards compatibility). Keywords : Comma separated list of keywords. Selfjoin : If checked, selfjoin of users is allowd Status : If checked, the status is \"active\"","title":"Project Metadata"},{"location":"knora_console/#edit-new-project","text":"Modifying an existing or creating a new project use the same dialog window with the same fields. If a field is changed the [X]-Button on the right side becomes active. Pressing this button restores the original value of the field. Fields that are grayed out cannot be modifyed (blocked by the Knora backend)","title":"Edit / New project"},{"location":"knora_console/#list-tab","text":"Lists represent hierarchical taxonomies and are defined within the context of a specific class. Each entry is represented by a node that can have children nodes. The root node holds the list name and description The list tab displays all lists available. The display can be filtered by project to show only the lists defined by one specific project.","title":"List Tab"},{"location":"knora_console/#new-list","text":"In order to create a new list, ou have first to create a new root note. Click in the List-tab the new button to open the dialog window for entering the data of the new list root node: The dialog has the following fields: Project : Select the project the list belongs to Label : The name of the list as given to the human reader Name : A name that will be used referencing the list programmatically (upload scripts, tools etc.) Comment : Additional information about the list The next step is to add nodes. Close the dialog, select the new list and then click onto the edit button","title":"New List"},{"location":"knora_console/#edit-list","text":"Clicking on the edit button opens the dialog to modify and/or add nodes. The dialog consists of two parts: On the left side, the hierarchical structure of the list is displayed as tree. Each node can be selected. on the right side, the metadata of the selected node is shown There are two options:","title":"Edit List"},{"location":"knora_console/#modify-node","text":"Modify or complete the data of the selected list node and then press the Save button:","title":"Modify Node"},{"location":"knora_console/#add-node-below","text":"In order to add a child node, select the parent node. Then click on the Add new node below.. button. A new node entry dialog will open to be filled out.","title":"Add Node Below"},{"location":"knora_console/#groups-tab","text":"Groups are used for the permission concept of knora. A group is associated with permissions, and users are part of one or many groups (or may not be part of any group). A group is always associated with a specific project. To add or modify a group, the group dialog is used: The group dialog has the following fields: Name : Name of the group Description : A short description of the purpose of the group Project : The project the group is associated with (Cannot be changed after creation) . Selfjoin : If checked, a user may join a group on it's own Status : Check for making the group active","title":"Groups Tab"},{"location":"knoractl/","text":"","title":"Knoractl"},{"location":"xml2knora/","text":"knora-xml-import Use knora-xml-import for importing data from an XML-file into knora. Usage: $ knora-xml-import project-shortname It supports the following options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: http://0.0.0.0:3333] \"-S sipi-server\" | \"--sipi sipi-server\" : The URL of the SIPI IIIF server [default: http://0.0.0.0:1024] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-F folder\" | \"--folder folder\" : Folder containing the XML-file with the data and the images [default: project-short-name .dir] \"-i input_file\" | \"--infile input_file\" : Input data file (XML). \"-a assets_dir\" | \"--assets asset_dir\" : Path to assets folder. \"-I images_dir\" | \"--images images_dir\" : Path to images folder \"-v\" | \"--validate\" : Do only validation of input file It is mandatory to give the project shortname, username and password to connect to the Knora backend. If no other options are given, knora-ml-import assumes that there is a folder with the name \" project-shortname .dir\" which contains the XML file that has the same name as the project with the extension .xml an optional directory called assets that contains icons etc. a directory called images containing the images for StillImageResources may contain the project ontology definition as JSON file However, the XML-import file, assets folder and the images folder may begiven on the command line. Knora XML-file format for importing data The import file is a standard XML file as decribed below. Preamble The import file must start with the standard XML header: <?xml version='1.0' encoding='utf-8'?> <knora> -element The <knora> -element describes a set of resources that are to be imported. It is the container for an arbitrary number of resource elements and may only contain resource tags. The <knora> -eelement defines has the following options: - xmlns:xsi : \"http://www.w3.org/2001/XMLSchema-instance\" [required] - xsi:schemaLocation : Path to knora XML schema file for validation [optional] - shortcode : Knora project shortcode, e.g. \"0801\" [required] - ontology : Name of the ontology [required] Thus, the <knora> -eelment may b used as follows: <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"../knora-data-schema.xsd\" shortcode=\"0806\" ontology=\"webern\"> \u2026 </knora> The <knora> -element can only contain - <permissions> -elements - <resource> -elements The permissions are implemented for importing data using permission sets. A permission set is a named element that contains the permissions for selected resources or values. In order to give a resource a value the permission, the named permission set is referenced. <permissions> -element A <permissions> -element contains the permissions given to the selected groups. It contains a mandatory options id and must contain at least one <allow> -element per user group indicatng the group's permission. It has the form: <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> ... </permissions> Options: - id : Unique id (an xs:ID) for the permission set Subelements allowed: - <allow> <allow> -element The <allow> -element is used to defined the permission for one group. It has the form: <allow group=\"ProjectAdmin\">CR</allow>> The allowed values are (see Knora-documentation for a more detailed description of the Knora permission system): \"RV\" : Restricted view: Th associated media is shown in reduced quality. \"V\" : View: The user is able to view the data readonly \"M\" : Modifiy: The user may modify of a value. The original value will be preserved using the history mchanism. \"D\" : Delete: The user is able to mark a resource of a value as deleted. \"CR\" : The user is able to change the right of a resource or value The group option is mandatory: Options: group : Defines the group for the permission. The knora systemgroups as well as project speccific groups are supported. A project specific group name has the form project-shortname:groupnam . The system groups are: \"UnknownUser\" \"KnownUser\" \"ProjectMember\" \"Creator\" \"ProjectAdmin\" \"SystemAdmin\" <resource> -element A resource -element contains all necessary information to create a resource. It has th following options: label : The label, a human readable, semantical meaningfull short name of the resource [required] restype : The resource type as defined within the ontology [required] unique_id : A unique, arbitrary string giving a unique ID to the resource. This ID is only used during the import process for referencing this resource from other resources. During the import process, it will be replaced by the IRI used internally by Knora. permissions : a reference to a permission set. These permissions will be applied to the newly created resoource. <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\" permissions=\"res-def-perm\"> \u2026 </resource> The <resource> -element contains for each property class a property -element which itself contains one or several value -elements. It must also contain an <image> -element if the resource is a StillImage. The property -element must have the option name present which indicates the property class from the project specific ontology where the values belong to. name -option: \"name\" : Name of the property as given in the ontology Example: <text-prop name=\"hasTranslation\"> The <resource> -element may contain the following tags describing properties (data fields): <image> : In case of the StillImageResource contains the path to the image file. <text-prop> : Contains text values <color-prop> : Contains color values <date-prop> : Contains date values <decimal-prop> : Contains decimal values <geometry-prop> : Contains a JSON geometry definition for a region <geoname-prop> : Contains a geoname.org location code <list-prop> : Contains list elements labels <iconclass-prop> : Contains iconclass.org codes <integer-prop> : Contains integer values <interval-prop> : Contains interval values <period-prop> : Contains time period values <resptr-prop> : Contains links othr resources <time-prop> : Contains time values <uri-prop> : Contains URI values <boolean-prop> : Contains boolean values <image> -element The <image> -element contains the path to an image file. It must only be used if the resource is a StillImageResource ! Options : - none Note : There is only one <image> -element allowed per StillImageResource! Example: <image>postcards.dir/images/EURUS015a.jpg</image> <text-prop> -element The text property element is used to list text values. The <text-prop> -element must contain at least one <text> -element. There are several variants of text tags: Options : - \"name\" : Name of the property as given in the ontology (required) <text> -element The <text> -element has the following options: - encoding : either \"utf8\" or \"hex64\" [required] - utf8 : The element describes a simple text without markup. The text is a simple utf-8 string - hex64 : The elemen describes a complex text containing markup. It must be a hex64 encoded string in the XML-format as defined by Knora. - resrefs : A list of resource ID's that are referenced in the markup, separated by the \"|\"-character such as \"2569981|6618\" [optional] - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Knora-xml-import assumes that for markup-text (standoff-markup) standard mapping for Knora is being used (Custom mapping to customized standoff tags is not yet implemented!) E.g. a text containing a link to another resource must have the following form before being encoded as hex64-string: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>Brief: <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a>' Please note that the href-option withiin the anchor tag points to an internal resource of knora and this has to have the special format \" IRI: res-id :IRI \" where res-id is the resource id defined within the XML import file. A resource already existing in knora can be referenced by indicating its IRI directly has href -option. In case the string references one or more internal resources, the option resrefs must be using to indicate there ID's! The ID's are separated by a \"|\"-character A complete example for a simple text: <text-prop name=\"hasComment\"> <text encoding=\"utf8\">Probe bei \"Wimberger\". Lokal in Wien?</text> </text-prop> A complete example of a complex text which encodes the text <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a><p></p> containing a link to the internal resource with the ID=\"6618\": <text-prop name=\"hasComment\"> <text resrefs=\"6618\" encoding=\"hex64\">PGEgY2xhc3M9InNhbHNhaC1saW5rIiBocmVmPSJJUkk6NjYxODpJUkkiPjxwPldlYmVybiBhbiBXaWxsaGVpbSwgMTAuMTAuMTkyODwvcD48L2E+PHA+PC9wPg==</text> </text-prop> Within one text property, simple and complex text values may be mixed. <color-prop> -element The color-prop eelement is used to define a color property. Options : - \"name\" : Name of the property as given in the ontology (required) <color> -element The color-element is used to indicate a color value. The color has to be giiven in web-notation, that is a \"#\" followed by 3 or 6 hex numerals. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. A propery with 2 color valus would be defined as follows: <color-prop name=\"hasColor\"> <color>#00ff66</color> <color>#ff00ff</color> </color-prop> <date-prop> -eleement Is used to define knora dates. Options : - \"name\" : Name of the property as given in the ontology (required) <date> -element A Knora date value. It has the following format: calendar:epoch:yyyy-mm-dd:epoch:yyyy-mm-dd calendar : either \"JULIAN\" or \"GREGORIAN\" [optional, default: GREGORIAN] epoch : either \"BCE\" or \"CE\" [optional, default CE] yyyy : year with four digits (at least one must be given) mm : month with two digits 01, 02, .., 12 dd : day eith two digits If two dates are given, the date is in between the two given limits. If the day is omitted, then the precision it month , if also the month is omited, the procision is year . Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Examples: <date>GREGORIAN:CE:2014-01-31</date> <date>GREGORIAN:CE:1930-09-02:CE:1930-09-03</date> <decimal-prop> -element Properties with decimal values. Contains one or more <dcimal> -tags. Options : - \"name\" : Name of the property as given in the ontology (required) <decimal> -element The float element contains a decimal number. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <float>3.14159</float> <geometry-prop> -element Properties which contain a geometric definition for a 2-D region (e.g. on an image). Usually thes are not created by an import and should be used with caution! Options : - \"name\" : Name of the property as given in the ontology (required) <geometry> -element A geometry is defined as a JSON object. It contains the following data: - status : \"active\" or \"deleted\" - type : \"circle\", \"rectangle\" or \"polygon\" - lineColor : WEB-Color - lineWidth : integer number (in pixels) - points : Array of coordinate objects of the form {\"x\": decimal, \"y\": decimal} - radius : Coordinate object in the form {\"x\": decimal, \"y\": decimal} Please note that all coordinates are normalized coordinates (relative to the image size) between 0.0 and 1.0 ! The following example defines a poylgon: { \"status\": \"active\", \"type\": \"polygon\", \"lineColor\": \"#ff3333\", \"lineWidth\": 2, \"points: [{\"x\": 0.17252396166134185, \"y\": 0.1597222222222222}, {\"x\": 0.8242811501597445, \"y\": 0.14583333333333334}, {\"x\": 0.8242811501597445, \"y\": 0.8310185185185185}, {\"x\": 0.1757188498402556, \"y\": 0.8240740740740741}, {\"x\": 0.1757188498402556, \"y\": 0.1597222222222222}, {\"x\": 0.16932907348242812, \"y\": 0.16435185185185186}], \"original_index\": 0 } Thus, a -element may look like: <geometry>{\"status\":\"active\",\"type\"=\"circle\",\"lineColor\"=\"#ff0000\",\"lineWidth\"=2,\"points\":[{\"x\":0.5,\"y\":0.5}],\"radius\":{\"x\":0.1,\"y\":0.0}}</geometry> Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. <geoname-prop> -element Used for values that contain a geonames.org location ID Options : - \"name\" : Name of the property as given in the ontology (required) <geoname> -element Contains a valid geonames.org ID. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example (City of Wien): <geoname>2761369</geoname> <list-prop> -element Entry into a list (list node). List nodes are identified by their name -property that was given when creating the list nodes (which must be unique within each list!). Options : - \"name\" : Name of the property as given in the ontology (required) <list> -element References a node in a (pulldown- or hierarchical-) list Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <list>H_4128</list> <iconclass-prop> -element ( NOT YET IMPLEMENTED ) Contains the short code of an iconclass entry see iconclass.org . For example the code 92E112 stands for (story of) Aurora (Eos); 'Aurora' (Ripa) - infancy, upbringing Aurora \u00b7 Ripa \u00b7 air \u00b7 ancient history \u00b7 child \u00b7 classical antiquity \u00b7 goddess \u00b7 gods \u00b7 heaven \u00b7 history \u00b7 infancy \u00b7 mythology \u00b7 sky \u00b7 upbringing \u00b7 youth Options : - \"name\" : Name of the property as given in the ontology (required) <iconclass> -element ( NOT YET IMPLEMENTED ) References an iconclass.org Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <iconclass>92E112</iconclass> <integer-prop> -element Contains integer values Options : - \"name\" : Name of the property as given in the ontology (required) <integer> -element Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <integer>4711</integer> <interval-prop> -element An interval defined a time period with a start and an end Options : - \"name\" : Name of the property as given in the ontology (required) <interval> -element The interval-tag value has the following form or two decimals separated by a \":\". Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <interval>1.5:3.12</interval> <resptr-prop> -element A link to another resource within Knora Options : - \"name\" : Name of the property as given in the ontology (required) <resptr> -element A value containing the XML-internal ID of the resource. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: If there is a resource deefined as <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\"> \u2026 </resource it can be referenced as <resptr>238807</resptr> <time-prop> -element A time property Options : - \"name\" : Name of the property as given in the ontology (required) <time> -element This represents an exact date/time value in the form of yyyy-mm-ddThh:mm:ss.sssssssssssszzzzzz The following abbreviations describe this form: yyyy A four-digit numeral that represents the year. The value cannot begin with a negative (-) sign or a plus (+) sign. 0001 is the lexical representation of the year 1 of the Common Era (also known as 1 AD). The value cannot be 0000. mm A two-digit numeral that represents the month. dd A two-digit numeral that represents the day. _hh_A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm A two-digit numeral that represents the minute. ss A two-digit numeral that represents the whole seconds. ssssssssssss Optional. If present, a 1-to-12 digit numeral that represents the fractional seconds. zzzzzz Is required and represents the time zone. Each part of the datetime value that is expressed as a numeric value is constrained to the maximum value within the interval that is determined by the next-higher part of the datetime value. For example, the day value can never be 32 and cannot be 29 for month 02 and year 2002 (February 2002). The timezone is defined as follows: A positive (+) or negative (-) sign that is followed by hh:mm, where the following abbreviations are used: hh A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm two-digit numeral that represents the minutes. The value of the minutes property must be zero when the hours property is equal to 14. + Indicates that the specified time instant is in a time zone that is ahead of the UTC time by hh hours and mm minutes. - Indicates that the specified time instant is in a time zone that is behind UTC time by hh hours and mm minutes. or Z The literal Z, which represents the time in UTC (Z represents Zulu time, which is equivalent to UTC). Specifying Z for the time zone is equivalent to specifying +00:00 or -00:00. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: The following form indicates noon on 10 October 2009, Eastern Standard Time in the United States: <time>2009-10-10T12:00:00-05:00</time> <time>2019-10-23T13.45:12Z</time> <uri-prop> -element A property containing an valid URI Options : - \"name\" : Name of the property as given in the ontology (required) <uri> -element Contains a syntactically valid URI. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <uri>http://www.groove-t-gang.ch</ur> <boolean-prop >-element A property containing boolean values Options : - \"name\" : Name of the property as given in the ontology (required) <boolean> -element Must contain the string \"true\" or \"false\", or the numeral \"1\" or \"0\" Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <boolean>true</boolean> <boolean>0</boolean>","title":"knora-xml-import"},{"location":"xml2knora/#knora-xml-import","text":"Use knora-xml-import for importing data from an XML-file into knora.","title":"knora-xml-import"},{"location":"xml2knora/#usage","text":"$ knora-xml-import project-shortname It supports the following options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: http://0.0.0.0:3333] \"-S sipi-server\" | \"--sipi sipi-server\" : The URL of the SIPI IIIF server [default: http://0.0.0.0:1024] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-F folder\" | \"--folder folder\" : Folder containing the XML-file with the data and the images [default: project-short-name .dir] \"-i input_file\" | \"--infile input_file\" : Input data file (XML). \"-a assets_dir\" | \"--assets asset_dir\" : Path to assets folder. \"-I images_dir\" | \"--images images_dir\" : Path to images folder \"-v\" | \"--validate\" : Do only validation of input file It is mandatory to give the project shortname, username and password to connect to the Knora backend. If no other options are given, knora-ml-import assumes that there is a folder with the name \" project-shortname .dir\" which contains the XML file that has the same name as the project with the extension .xml an optional directory called assets that contains icons etc. a directory called images containing the images for StillImageResources may contain the project ontology definition as JSON file However, the XML-import file, assets folder and the images folder may begiven on the command line.","title":"Usage:"},{"location":"xml2knora/#knora-xml-file-format-for-importing-data","text":"The import file is a standard XML file as decribed below.","title":"Knora XML-file format for importing data"},{"location":"xml2knora/#preamble","text":"The import file must start with the standard XML header: <?xml version='1.0' encoding='utf-8'?>","title":"Preamble"},{"location":"xml2knora/#knora-element","text":"The <knora> -element describes a set of resources that are to be imported. It is the container for an arbitrary number of resource elements and may only contain resource tags. The <knora> -eelement defines has the following options: - xmlns:xsi : \"http://www.w3.org/2001/XMLSchema-instance\" [required] - xsi:schemaLocation : Path to knora XML schema file for validation [optional] - shortcode : Knora project shortcode, e.g. \"0801\" [required] - ontology : Name of the ontology [required] Thus, the <knora> -eelment may b used as follows: <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"../knora-data-schema.xsd\" shortcode=\"0806\" ontology=\"webern\"> \u2026 </knora> The <knora> -element can only contain - <permissions> -elements - <resource> -elements The permissions are implemented for importing data using permission sets. A permission set is a named element that contains the permissions for selected resources or values. In order to give a resource a value the permission, the named permission set is referenced.","title":"&lt;knora&gt;-element"},{"location":"xml2knora/#permissions-element","text":"A <permissions> -element contains the permissions given to the selected groups. It contains a mandatory options id and must contain at least one <allow> -element per user group indicatng the group's permission. It has the form: <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> ... </permissions> Options: - id : Unique id (an xs:ID) for the permission set Subelements allowed: - <allow>","title":"&lt;permissions&gt;-element"},{"location":"xml2knora/#allow-element","text":"The <allow> -element is used to defined the permission for one group. It has the form: <allow group=\"ProjectAdmin\">CR</allow>> The allowed values are (see Knora-documentation for a more detailed description of the Knora permission system): \"RV\" : Restricted view: Th associated media is shown in reduced quality. \"V\" : View: The user is able to view the data readonly \"M\" : Modifiy: The user may modify of a value. The original value will be preserved using the history mchanism. \"D\" : Delete: The user is able to mark a resource of a value as deleted. \"CR\" : The user is able to change the right of a resource or value The group option is mandatory: Options: group : Defines the group for the permission. The knora systemgroups as well as project speccific groups are supported. A project specific group name has the form project-shortname:groupnam . The system groups are: \"UnknownUser\" \"KnownUser\" \"ProjectMember\" \"Creator\" \"ProjectAdmin\" \"SystemAdmin\"","title":"&lt;allow&gt;-element"},{"location":"xml2knora/#resource-element","text":"A resource -element contains all necessary information to create a resource. It has th following options: label : The label, a human readable, semantical meaningfull short name of the resource [required] restype : The resource type as defined within the ontology [required] unique_id : A unique, arbitrary string giving a unique ID to the resource. This ID is only used during the import process for referencing this resource from other resources. During the import process, it will be replaced by the IRI used internally by Knora. permissions : a reference to a permission set. These permissions will be applied to the newly created resoource. <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\" permissions=\"res-def-perm\"> \u2026 </resource> The <resource> -element contains for each property class a property -element which itself contains one or several value -elements. It must also contain an <image> -element if the resource is a StillImage. The property -element must have the option name present which indicates the property class from the project specific ontology where the values belong to. name -option: \"name\" : Name of the property as given in the ontology Example: <text-prop name=\"hasTranslation\"> The <resource> -element may contain the following tags describing properties (data fields): <image> : In case of the StillImageResource contains the path to the image file. <text-prop> : Contains text values <color-prop> : Contains color values <date-prop> : Contains date values <decimal-prop> : Contains decimal values <geometry-prop> : Contains a JSON geometry definition for a region <geoname-prop> : Contains a geoname.org location code <list-prop> : Contains list elements labels <iconclass-prop> : Contains iconclass.org codes <integer-prop> : Contains integer values <interval-prop> : Contains interval values <period-prop> : Contains time period values <resptr-prop> : Contains links othr resources <time-prop> : Contains time values <uri-prop> : Contains URI values <boolean-prop> : Contains boolean values","title":"&lt;resource&gt;-element"},{"location":"xml2knora/#image-element","text":"The <image> -element contains the path to an image file. It must only be used if the resource is a StillImageResource ! Options : - none Note : There is only one <image> -element allowed per StillImageResource! Example: <image>postcards.dir/images/EURUS015a.jpg</image>","title":"&lt;image&gt;-element"},{"location":"xml2knora/#text-prop-element","text":"The text property element is used to list text values. The <text-prop> -element must contain at least one <text> -element. There are several variants of text tags: Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;text-prop&gt;-element"},{"location":"xml2knora/#text-element","text":"The <text> -element has the following options: - encoding : either \"utf8\" or \"hex64\" [required] - utf8 : The element describes a simple text without markup. The text is a simple utf-8 string - hex64 : The elemen describes a complex text containing markup. It must be a hex64 encoded string in the XML-format as defined by Knora. - resrefs : A list of resource ID's that are referenced in the markup, separated by the \"|\"-character such as \"2569981|6618\" [optional] - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Knora-xml-import assumes that for markup-text (standoff-markup) standard mapping for Knora is being used (Custom mapping to customized standoff tags is not yet implemented!) E.g. a text containing a link to another resource must have the following form before being encoded as hex64-string: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>Brief: <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a>' Please note that the href-option withiin the anchor tag points to an internal resource of knora and this has to have the special format \" IRI: res-id :IRI \" where res-id is the resource id defined within the XML import file. A resource already existing in knora can be referenced by indicating its IRI directly has href -option. In case the string references one or more internal resources, the option resrefs must be using to indicate there ID's! The ID's are separated by a \"|\"-character A complete example for a simple text: <text-prop name=\"hasComment\"> <text encoding=\"utf8\">Probe bei \"Wimberger\". Lokal in Wien?</text> </text-prop> A complete example of a complex text which encodes the text <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a><p></p> containing a link to the internal resource with the ID=\"6618\": <text-prop name=\"hasComment\"> <text resrefs=\"6618\" encoding=\"hex64\">PGEgY2xhc3M9InNhbHNhaC1saW5rIiBocmVmPSJJUkk6NjYxODpJUkkiPjxwPldlYmVybiBhbiBXaWxsaGVpbSwgMTAuMTAuMTkyODwvcD48L2E+PHA+PC9wPg==</text> </text-prop> Within one text property, simple and complex text values may be mixed.","title":"&lt;text&gt;-element"},{"location":"xml2knora/#color-prop-element","text":"The color-prop eelement is used to define a color property. Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;color-prop&gt;-element"},{"location":"xml2knora/#color-element","text":"The color-element is used to indicate a color value. The color has to be giiven in web-notation, that is a \"#\" followed by 3 or 6 hex numerals. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. A propery with 2 color valus would be defined as follows: <color-prop name=\"hasColor\"> <color>#00ff66</color> <color>#ff00ff</color> </color-prop>","title":"&lt;color&gt;-element"},{"location":"xml2knora/#date-prop-eleement","text":"Is used to define knora dates. Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;date-prop&gt;-eleement"},{"location":"xml2knora/#date-element","text":"A Knora date value. It has the following format: calendar:epoch:yyyy-mm-dd:epoch:yyyy-mm-dd calendar : either \"JULIAN\" or \"GREGORIAN\" [optional, default: GREGORIAN] epoch : either \"BCE\" or \"CE\" [optional, default CE] yyyy : year with four digits (at least one must be given) mm : month with two digits 01, 02, .., 12 dd : day eith two digits If two dates are given, the date is in between the two given limits. If the day is omitted, then the precision it month , if also the month is omited, the procision is year . Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Examples: <date>GREGORIAN:CE:2014-01-31</date> <date>GREGORIAN:CE:1930-09-02:CE:1930-09-03</date>","title":"&lt;date&gt;-element"},{"location":"xml2knora/#decimal-prop-element","text":"Properties with decimal values. Contains one or more <dcimal> -tags. Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;decimal-prop&gt;-element"},{"location":"xml2knora/#decimal-element","text":"The float element contains a decimal number. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <float>3.14159</float>","title":"&lt;decimal&gt;-element"},{"location":"xml2knora/#geometry-prop-element","text":"Properties which contain a geometric definition for a 2-D region (e.g. on an image). Usually thes are not created by an import and should be used with caution! Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;geometry-prop&gt;-element"},{"location":"xml2knora/#geometry-element","text":"A geometry is defined as a JSON object. It contains the following data: - status : \"active\" or \"deleted\" - type : \"circle\", \"rectangle\" or \"polygon\" - lineColor : WEB-Color - lineWidth : integer number (in pixels) - points : Array of coordinate objects of the form {\"x\": decimal, \"y\": decimal} - radius : Coordinate object in the form {\"x\": decimal, \"y\": decimal} Please note that all coordinates are normalized coordinates (relative to the image size) between 0.0 and 1.0 ! The following example defines a poylgon: { \"status\": \"active\", \"type\": \"polygon\", \"lineColor\": \"#ff3333\", \"lineWidth\": 2, \"points: [{\"x\": 0.17252396166134185, \"y\": 0.1597222222222222}, {\"x\": 0.8242811501597445, \"y\": 0.14583333333333334}, {\"x\": 0.8242811501597445, \"y\": 0.8310185185185185}, {\"x\": 0.1757188498402556, \"y\": 0.8240740740740741}, {\"x\": 0.1757188498402556, \"y\": 0.1597222222222222}, {\"x\": 0.16932907348242812, \"y\": 0.16435185185185186}], \"original_index\": 0 } Thus, a -element may look like: <geometry>{\"status\":\"active\",\"type\"=\"circle\",\"lineColor\"=\"#ff0000\",\"lineWidth\"=2,\"points\":[{\"x\":0.5,\"y\":0.5}],\"radius\":{\"x\":0.1,\"y\":0.0}}</geometry> Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value.","title":"&lt;geometry&gt;-element"},{"location":"xml2knora/#geoname-prop-element","text":"Used for values that contain a geonames.org location ID Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;geoname-prop&gt;-element"},{"location":"xml2knora/#geoname-element","text":"Contains a valid geonames.org ID. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example (City of Wien): <geoname>2761369</geoname>","title":"&lt;geoname&gt;-element"},{"location":"xml2knora/#list-prop-element","text":"Entry into a list (list node). List nodes are identified by their name -property that was given when creating the list nodes (which must be unique within each list!). Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;list-prop&gt;-element"},{"location":"xml2knora/#list-element","text":"References a node in a (pulldown- or hierarchical-) list Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <list>H_4128</list>","title":"&lt;list&gt;-element"},{"location":"xml2knora/#iconclass-prop-element-not-yet-implemented","text":"Contains the short code of an iconclass entry see iconclass.org . For example the code 92E112 stands for (story of) Aurora (Eos); 'Aurora' (Ripa) - infancy, upbringing Aurora \u00b7 Ripa \u00b7 air \u00b7 ancient history \u00b7 child \u00b7 classical antiquity \u00b7 goddess \u00b7 gods \u00b7 heaven \u00b7 history \u00b7 infancy \u00b7 mythology \u00b7 sky \u00b7 upbringing \u00b7 youth Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;iconclass-prop&gt;-element (NOT YET IMPLEMENTED)"},{"location":"xml2knora/#iconclass-element-not-yet-implemented","text":"References an iconclass.org Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <iconclass>92E112</iconclass>","title":"&lt;iconclass&gt;-element (NOT YET IMPLEMENTED)"},{"location":"xml2knora/#integer-prop-element","text":"Contains integer values Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;integer-prop&gt;-element"},{"location":"xml2knora/#integer-element","text":"Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <integer>4711</integer>","title":"&lt;integer&gt;-element"},{"location":"xml2knora/#interval-prop-element","text":"An interval defined a time period with a start and an end Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;interval-prop&gt;-element"},{"location":"xml2knora/#interval-element","text":"The interval-tag value has the following form or two decimals separated by a \":\". Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <interval>1.5:3.12</interval>","title":"&lt;interval&gt;-element"},{"location":"xml2knora/#resptr-prop-element","text":"A link to another resource within Knora Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;resptr-prop&gt;-element"},{"location":"xml2knora/#resptr-element","text":"A value containing the XML-internal ID of the resource. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: If there is a resource deefined as <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\"> \u2026 </resource it can be referenced as <resptr>238807</resptr>","title":"&lt;resptr&gt;-element"},{"location":"xml2knora/#time-prop-element","text":"A time property Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;time-prop&gt;-element"},{"location":"xml2knora/#time-element","text":"This represents an exact date/time value in the form of yyyy-mm-ddThh:mm:ss.sssssssssssszzzzzz The following abbreviations describe this form: yyyy A four-digit numeral that represents the year. The value cannot begin with a negative (-) sign or a plus (+) sign. 0001 is the lexical representation of the year 1 of the Common Era (also known as 1 AD). The value cannot be 0000. mm A two-digit numeral that represents the month. dd A two-digit numeral that represents the day. _hh_A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm A two-digit numeral that represents the minute. ss A two-digit numeral that represents the whole seconds. ssssssssssss Optional. If present, a 1-to-12 digit numeral that represents the fractional seconds. zzzzzz Is required and represents the time zone. Each part of the datetime value that is expressed as a numeric value is constrained to the maximum value within the interval that is determined by the next-higher part of the datetime value. For example, the day value can never be 32 and cannot be 29 for month 02 and year 2002 (February 2002). The timezone is defined as follows: A positive (+) or negative (-) sign that is followed by hh:mm, where the following abbreviations are used: hh A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm two-digit numeral that represents the minutes. The value of the minutes property must be zero when the hours property is equal to 14. + Indicates that the specified time instant is in a time zone that is ahead of the UTC time by hh hours and mm minutes. - Indicates that the specified time instant is in a time zone that is behind UTC time by hh hours and mm minutes. or Z The literal Z, which represents the time in UTC (Z represents Zulu time, which is equivalent to UTC). Specifying Z for the time zone is equivalent to specifying +00:00 or -00:00. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: The following form indicates noon on 10 October 2009, Eastern Standard Time in the United States: <time>2009-10-10T12:00:00-05:00</time> <time>2019-10-23T13.45:12Z</time>","title":"&lt;time&gt;-element"},{"location":"xml2knora/#uri-prop-element","text":"A property containing an valid URI Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;uri-prop&gt;-element"},{"location":"xml2knora/#uri-element","text":"Contains a syntactically valid URI. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <uri>http://www.groove-t-gang.ch</ur>","title":"&lt;uri&gt;-element"},{"location":"xml2knora/#boolean-prop-element","text":"A property containing boolean values Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;boolean-prop&gt;-element"},{"location":"xml2knora/#boolean-element","text":"Must contain the string \"true\" or \"false\", or the numeral \"1\" or \"0\" Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <boolean>true</boolean> <boolean>0</boolean>","title":"&lt;boolean&gt;-element"}]}