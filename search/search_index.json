{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"knora-py knora-py is a python package containing a command line tool for data model (ontology) creation, a library allowing creation of single resources and mass upload using the bulk import of data into the Knora framework. The package consists of: Knora Python3 library modules for accessing Knora using the API (ontology creation, data import/export etc.) knora-create-ontology A command line program to create an ontology out of a simple JSON description knora-xml-import A command line programm to import data into Knora using gthe API knora-reset-triplestore A command line program to reset the content of the ontology. Does not require a restart of the Knora-Stack. Install To install the latest version published on PyPI run: $ pip3 install knora To update to the latest version run: $ pip3 install --upgrade knora To install from source, i.e. this repository run: $ python3 setup.py install Importing data into the triple store using the library For importing data, you should consider using the knora-xml-knora command line tool which reads and validates a simple XML file contining the data too be imported. However, You can use the functioons and methods of knora-py directly in your python script if yoou prefer so. In order to import data, the data has to be read and reformatted. Reading the data depends on the dta source and has to be developed by the user. However Knora offers some simple methods to add the resource by resource to the Knora backend. Basically You need - to create a Knora() access instance - get the Ontology schema with a method provided by the Knora instance - call repeatedly the method create_resource() . Creating a Knora access instance First You have to import some libraries: from typing import List, Set, Dict, Tuple, Optional import json from jsonschema import validate from knora import KnoraError, KnoraStandoffXml, Knora, Sipi Then You are ready to create the Knora access isntance. You need to know the server URL of Knora and the login credentials to do so: con = Knora(args.server) # Create the Knora access instance con.login(args.user, args.password) # Perform a login Getting the ontology schema The next step is to fetch the ontology (data model) from the Knora server. You need to know the project code (usually a string in the form XXXX, where X are characters 0-9, A-F) and the name of the ontology. Note : This works only with projects that use a single ontology. Support for projects using several user defined ontologies has not yet been implemented. schema = con.create_schema(args.projectcode, args.ontoname) Creating resources Now You are ready to create the resources (see create_resource() for details of using this method): inst1_info = con.create_resource(schema, \"object1\", \"obj1_inst1\", { \"textprop\": \"Dies ist ein Text!\", \"intprop\": 7, \"listprop\": \"options:opt2\", \"dateprop\": \"1966:CE:1967-05-21\", \"decimalprop\": {'value': \"3.14159\", 'comment': \"Die Zahl PI\"}, \"geonameprop\": \"2661604\", \"richtextprop\": { 'value': KnoraStandoffXml(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<text><p><strong>this is</strong> text</p> with standoff</text>\"), 'comment': \"Text mit markup\" }, \"intervalprop\": \"13.57:15.88\" }) THe call to create_resource() returns a python Dict as follows: { 'ark': 'http://0.0.0.0:3336/ark:/72163/1/00FE/HJD5LCVFS=qzUPK2=LgX1wZ', 'iri': 'http://rdfh.ch/00FE/HJD5LCVFS-qzUPK2-LgX1w', 'vark': 'http://0.0.0.0:3336/ark:/72163/1/00FE/HJD5LCVFS=qzUPK2=LgX1wZ.20190620T221223429441Z' } The iri can be used to reference this newly created resource in later calls. Creating resources with attached images In order to create a StillImageRepresentation, that is a resource that is connected to an image, YOu first have to upload the image usiing Sipi. For this YOu create first an instance of Sipi: sipi = Sipi(args.sipi, con.get_token()) The access token is taken from the Knora access instance using the method get_tokeen() . The Sipi instance is then able to upload images: res = sipi.upload_image('example.tif') The parameter to upload_image() is the path to the image file. Currently J2K, TIF, PNG and JPG-imges are supported. Now You are read to create the resource: fileref = res['uploadedFiles'][0]['internalFilename'] inst2_info = con.create_resource( schema, \"object2\", \"obj2_inst1\", { \"titleprop\": \"Stained glass\", \"linkprop\": inst1_info['iri'] }, fileref) Please note that above example creates a resource that has a link to another resource. It uses a link property defined in this example ontology as linkprop . Complete example The complete example looks as follows: import os from typing import List, Set, Dict, Tuple, Optional from pprint import pprint import argparse import json from jsonschema import validate from knora import KnoraError, KnoraStandoffXml, Knora, Sipi parser = argparse.ArgumentParser() parser.add_argument(\"-s\", \"--server\", type=str, default=\"http://0.0.0.0:3333\", help=\"URL of the Knora server\") parser.add_argument(\"-S\", \"--sipi\", type=str, default=\"http://0.0.0.0:1024\", help=\"URL of SIPI server\") parser.add_argument(\"-u\", \"--user\", default=\"root@example.com\", help=\"Username for Knora\") parser.add_argument(\"-p\", \"--password\", default=\"test\", help=\"The password for login\") parser.add_argument(\"-P\", \"--projectcode\", default=\"00FE\", help=\"Project short code\") parser.add_argument(\"-O\", \"--ontoname\", default=\"kpt\", help=\"Shortname of ontology\") args = parser.parse_args() con = Knora(args.server) con.login(args.user, args.password) schema = con.create_schema(args.projectcode, args.ontoname) inst1_info = con.create_resource( schema, \"object1\", \"obj1_inst1\", { \"textprop\": \"Dies ist ein Text!\", \"intprop\": 7, \"listprop\": \"options:opt2\", \"dateprop\": \"1966:CE:1967-05-21\", \"decimalprop\": {'value': \"3.14159\", 'comment': \"Die Zahl PI\"}, \"geonameprop\": \"2661604\", \"richtextprop\": { 'value': KnoraStandoffXml(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<text><p><strong>this is</strong> text</p> with standoff</text>\"), 'comment': \"Text mit markup\" }, \"intervalprop\": \"13.57:15.88\" }) pprint(inst1_info) #first upload image to SIPI sipi = Sipi(args.sipi, con.get_token()) res = sipi.upload_image('example.tif') pprint(res) fileref = res['uploadedFiles'][0]['internalFilename'] inst2_info = con.create_resource( schema, \"object2\", \"obj2_inst1\", { \"titleprop\": \"Stained glass\", \"linkprop\": inst1_info['iri'] }, fileref) pprint(inst2_info) Resetting the triplestore with knora-reset-triplestore This script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model. Usage: $ knora-reset-triplestore It supports the following options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: localhost:3333] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] For resetting of the triplestore through Knora-API to work, it is necessary to start the Knora-API server with a configuration parameter allowing this operation (e.g., KNORA_WEBAPI_ALLOW_RELOAD_OVER_HTTP environment variable or the corresponding setting in application.conf ). Bulk data import In order to make a bulk data import, a properly formatted XML file has to be created. The python module \"knora\" contains classes and methods to facilitate the creation of such a XML file. Requirements To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt Publishing Generate distribution package. Make sure you have the latest versions of setuptools and wheel installed: $ python3 -m pip install --upgrade pip setuptools wheel $ python3 setup.py sdist bdist_wheel You can install the package locally from the dist: $ python3 -m pip ./dist/some_name.whl Upload package with twine , first create ~/.pypirc : [distutils] index-servers=pypi [pypi] repository = https://upload.pypi.org/legacy/ username =your_username_on_pypi then upload: $ python3 -m pip install --upgrade tqdm twine $ python3 -m twine upload dist/* For local development: $ python3 setup.py develop Testing $ pip3 install pytest $ pip3 install --editable . $ pytest Requirements To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Introduction"},{"location":"#knora-py","text":"knora-py is a python package containing a command line tool for data model (ontology) creation, a library allowing creation of single resources and mass upload using the bulk import of data into the Knora framework. The package consists of: Knora Python3 library modules for accessing Knora using the API (ontology creation, data import/export etc.) knora-create-ontology A command line program to create an ontology out of a simple JSON description knora-xml-import A command line programm to import data into Knora using gthe API knora-reset-triplestore A command line program to reset the content of the ontology. Does not require a restart of the Knora-Stack.","title":"knora-py"},{"location":"#install","text":"To install the latest version published on PyPI run: $ pip3 install knora To update to the latest version run: $ pip3 install --upgrade knora To install from source, i.e. this repository run: $ python3 setup.py install","title":"Install"},{"location":"#importing-data-into-the-triple-store-using-the-library","text":"For importing data, you should consider using the knora-xml-knora command line tool which reads and validates a simple XML file contining the data too be imported. However, You can use the functioons and methods of knora-py directly in your python script if yoou prefer so. In order to import data, the data has to be read and reformatted. Reading the data depends on the dta source and has to be developed by the user. However Knora offers some simple methods to add the resource by resource to the Knora backend. Basically You need - to create a Knora() access instance - get the Ontology schema with a method provided by the Knora instance - call repeatedly the method create_resource() .","title":"Importing data into the triple store using the library"},{"location":"#creating-a-knora-access-instance","text":"First You have to import some libraries: from typing import List, Set, Dict, Tuple, Optional import json from jsonschema import validate from knora import KnoraError, KnoraStandoffXml, Knora, Sipi Then You are ready to create the Knora access isntance. You need to know the server URL of Knora and the login credentials to do so: con = Knora(args.server) # Create the Knora access instance con.login(args.user, args.password) # Perform a login","title":"Creating a Knora access instance"},{"location":"#getting-the-ontology-schema","text":"The next step is to fetch the ontology (data model) from the Knora server. You need to know the project code (usually a string in the form XXXX, where X are characters 0-9, A-F) and the name of the ontology. Note : This works only with projects that use a single ontology. Support for projects using several user defined ontologies has not yet been implemented. schema = con.create_schema(args.projectcode, args.ontoname)","title":"Getting the ontology schema"},{"location":"#creating-resources","text":"Now You are ready to create the resources (see create_resource() for details of using this method): inst1_info = con.create_resource(schema, \"object1\", \"obj1_inst1\", { \"textprop\": \"Dies ist ein Text!\", \"intprop\": 7, \"listprop\": \"options:opt2\", \"dateprop\": \"1966:CE:1967-05-21\", \"decimalprop\": {'value': \"3.14159\", 'comment': \"Die Zahl PI\"}, \"geonameprop\": \"2661604\", \"richtextprop\": { 'value': KnoraStandoffXml(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<text><p><strong>this is</strong> text</p> with standoff</text>\"), 'comment': \"Text mit markup\" }, \"intervalprop\": \"13.57:15.88\" }) THe call to create_resource() returns a python Dict as follows: { 'ark': 'http://0.0.0.0:3336/ark:/72163/1/00FE/HJD5LCVFS=qzUPK2=LgX1wZ', 'iri': 'http://rdfh.ch/00FE/HJD5LCVFS-qzUPK2-LgX1w', 'vark': 'http://0.0.0.0:3336/ark:/72163/1/00FE/HJD5LCVFS=qzUPK2=LgX1wZ.20190620T221223429441Z' } The iri can be used to reference this newly created resource in later calls.","title":"Creating resources"},{"location":"#creating-resources-with-attached-images","text":"In order to create a StillImageRepresentation, that is a resource that is connected to an image, YOu first have to upload the image usiing Sipi. For this YOu create first an instance of Sipi: sipi = Sipi(args.sipi, con.get_token()) The access token is taken from the Knora access instance using the method get_tokeen() . The Sipi instance is then able to upload images: res = sipi.upload_image('example.tif') The parameter to upload_image() is the path to the image file. Currently J2K, TIF, PNG and JPG-imges are supported. Now You are read to create the resource: fileref = res['uploadedFiles'][0]['internalFilename'] inst2_info = con.create_resource( schema, \"object2\", \"obj2_inst1\", { \"titleprop\": \"Stained glass\", \"linkprop\": inst1_info['iri'] }, fileref) Please note that above example creates a resource that has a link to another resource. It uses a link property defined in this example ontology as linkprop .","title":"Creating resources with attached images"},{"location":"#complete-example","text":"The complete example looks as follows: import os from typing import List, Set, Dict, Tuple, Optional from pprint import pprint import argparse import json from jsonschema import validate from knora import KnoraError, KnoraStandoffXml, Knora, Sipi parser = argparse.ArgumentParser() parser.add_argument(\"-s\", \"--server\", type=str, default=\"http://0.0.0.0:3333\", help=\"URL of the Knora server\") parser.add_argument(\"-S\", \"--sipi\", type=str, default=\"http://0.0.0.0:1024\", help=\"URL of SIPI server\") parser.add_argument(\"-u\", \"--user\", default=\"root@example.com\", help=\"Username for Knora\") parser.add_argument(\"-p\", \"--password\", default=\"test\", help=\"The password for login\") parser.add_argument(\"-P\", \"--projectcode\", default=\"00FE\", help=\"Project short code\") parser.add_argument(\"-O\", \"--ontoname\", default=\"kpt\", help=\"Shortname of ontology\") args = parser.parse_args() con = Knora(args.server) con.login(args.user, args.password) schema = con.create_schema(args.projectcode, args.ontoname) inst1_info = con.create_resource( schema, \"object1\", \"obj1_inst1\", { \"textprop\": \"Dies ist ein Text!\", \"intprop\": 7, \"listprop\": \"options:opt2\", \"dateprop\": \"1966:CE:1967-05-21\", \"decimalprop\": {'value': \"3.14159\", 'comment': \"Die Zahl PI\"}, \"geonameprop\": \"2661604\", \"richtextprop\": { 'value': KnoraStandoffXml(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<text><p><strong>this is</strong> text</p> with standoff</text>\"), 'comment': \"Text mit markup\" }, \"intervalprop\": \"13.57:15.88\" }) pprint(inst1_info) #first upload image to SIPI sipi = Sipi(args.sipi, con.get_token()) res = sipi.upload_image('example.tif') pprint(res) fileref = res['uploadedFiles'][0]['internalFilename'] inst2_info = con.create_resource( schema, \"object2\", \"obj2_inst1\", { \"titleprop\": \"Stained glass\", \"linkprop\": inst1_info['iri'] }, fileref) pprint(inst2_info)","title":"Complete example"},{"location":"#resetting-the-triplestore-with-knora-reset-triplestore","text":"This script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model.","title":"Resetting the triplestore with knora-reset-triplestore"},{"location":"#usage","text":"$ knora-reset-triplestore It supports the following options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: localhost:3333] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] For resetting of the triplestore through Knora-API to work, it is necessary to start the Knora-API server with a configuration parameter allowing this operation (e.g., KNORA_WEBAPI_ALLOW_RELOAD_OVER_HTTP environment variable or the corresponding setting in application.conf ).","title":"Usage:"},{"location":"#bulk-data-import","text":"In order to make a bulk data import, a properly formatted XML file has to be created. The python module \"knora\" contains classes and methods to facilitate the creation of such a XML file.","title":"Bulk data import"},{"location":"#requirements","text":"To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Requirements"},{"location":"#publishing","text":"Generate distribution package. Make sure you have the latest versions of setuptools and wheel installed: $ python3 -m pip install --upgrade pip setuptools wheel $ python3 setup.py sdist bdist_wheel You can install the package locally from the dist: $ python3 -m pip ./dist/some_name.whl Upload package with twine , first create ~/.pypirc : [distutils] index-servers=pypi [pypi] repository = https://upload.pypi.org/legacy/ username =your_username_on_pypi then upload: $ python3 -m pip install --upgrade tqdm twine $ python3 -m twine upload dist/* For local development: $ python3 setup.py develop","title":"Publishing"},{"location":"#testing","text":"$ pip3 install pytest $ pip3 install --editable . $ pytest","title":"Testing"},{"location":"#requirements_1","text":"To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Requirements"},{"location":"create_ontology/","text":"knora-create-ontology Creating an ontology with knora-create-ontology This script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model. Usage: $ knora-create-ontology data_model_definition.json It supports the foloowing options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: localhost:3333] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-v\" | \"--validate\" : If this flag is set, only the validation of the json is run \"-l\" | \"--lists\" : Only create the lists using simplyfied schema . Please note that in this case the project must exist. JSON ontology definition format The JSON file contains a first object an object with the prefixes for external ontologies that are being used, followed by the definition of the project wic h includes all resources and properties: Prefixes { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": {} } Project data The project definitions requires \"shortcode\" : A hexadecimal string in the range between \"0000\" and \"FFFF\" uniquely identifying the project. \"shortname\" : A short name (string) a \"longname\" : A longer string giving the full name for the project descriptions : Strings describing the projects content. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as JSON object with the language as key and the description as value. At least one description in one language is required. keywords : An array of keywords describing the project. lists : The definition of flat or hierarchical list (thesauri, controlled vocabularies) ontology : The definition of the data model (ontology) This a project definition lokks like follows: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project with no value.\", \"de\": \"Dies ist ein einfaches, wertloses Beispielproject\" } \"keywords\": [\"example\", \"senseless\"], \"lists\": [], \"ontology\": {} } Lists A List consists of a root node identifing the list and an array of subnodes. Each subnode may contain again subnodes (hierarchical list). A node has the following elements: name : Name of the node. Should be unique for the given list labels : Language dependent labels comments : language dependent comments (optional) nodes : Array of subnodes (optional \u2013 leave out if there are no subnodes) The lists object contains an array of lists. Here an example: \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Organisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ] the lists element is optional. Ontology The ontology object contains the definition of the data model. The ontology has the following elemens: name : The name of the ontology. This has to be a CNAME conformant name that can be use as prefix! label : Human readable and understandable name of the ontology resources : Array defining the resources (entities) of the data model \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [] } Resources The resource classes are the primary entities of the data model. A resource class is a template for the representation of a real object that is represented in the DaSCh database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource consists of the following definitions: name : A name for the resource label : The string displayed of the resource is being accessed super : A resource class is always derived from an other resource. The most generic resource class Knora offers is \"Resource\" . The following parent predefined resources are provided by knora: Resource : A generic \"thing\" that represents an item from the reral world StillImageRepresentation : An object that is connected to a still image TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) AudioRepresentation : An object representing audio data (Not Yet Implemented) DDDRepresentation : An object representing a 3d representation (Not Yet Implemented) DocumentRepresentation : An object representing a opaque document (e.g. a PDF) MovingImageRepresentation : An object representing a moving image (video, film) Annotation : A predefined annotation object. It has the following properties defined: hasComment (1-n), isAnnotationOf (1) LinkObj : An resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n), hasLinkTo (1-n) Region : Represents a simple region. The class has the following properties: hasColor (1), isRegionOf (1) hasGeometry (1), isRegionOf (1), hasComment (0-n) However, a resource my be derived from a resource class in another ontology within the same project or from another resource class in the same ontology. In this case the reference has to have the form prefix : resourceclassname . - labels : Language dependent, human readable names - comments : Language dependend comments (optional) - properties : Array of property definition for this resource class. Example: \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [\u2026] } Properties Properties are the definition of the data fields a resource class may or must have. The properties object has the following fields: name : A name for the property super : A property has to be derived from at least one base property. The most generic base property Knora offers is hasValue . In addition the property may by als a subproperty of properties defined in external ontologies. In this case the qualified name including the prefix has to be given. The following base properties are definied by Knora: hasValue : This is the most generic base. hasLinkTo : This value represents a link to another resource. You have to indicate the the \" object \" as a prefixed IRI that identifies the resource class this link points to. hasColor : Defines a color value ( ColorValue ) hasComment : Defines a \"standard\" comment hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is a prt of a \"book\". isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. seqnum : An integer that is used to define a sequence number in an ordered set of instances. object : The \"object\" defines the type of the value that the property will store. The following object types are allowed: TextValue : Represents a text that may contain standoff markup ColorValue : A string in the form \"#rrggbb\" (standard web color format) DateValue : represents a date. It is a string having the format \"_calendar\":\"start\":\"end\" calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year, of only the year and month are given, the precision is to a month. end is optional if the date represents a clearely defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means antime in between 1925 and the 22nd March 1927. DecimalValue : a number with decimal point GeomValue : Represents a geometrical shape as JSON. GeonameValue : Represents a location ID in geonames.org IntValue : Represents an integer value BooleanValue : Represents a Boolean (\"true\" or \"false) UriValue : : Represents an URI IntervalValue : Represents a time-interval ListValue : Represents a node of a (possibly hierarchical) list labels : Language dependent, human readable names gui_element : The gui_element is \u2013 strictly seen \u2013 not part of the data. It gives the generic GUI a hint about how the property should be presented to the used. Each gui_element may have associated gui_attributes which contain further hints. There are the following gui_elements available: Colorpicker : The only GUI element for ColorValue . Let's You pick a color. It requires the attribute \"ncolors=integer\" Date : The only GUI element for DateValue . A date picker gui. No attributes Geometry : Not Yet Implemented. Geonames : The only GUI element for GeonameValue . Interfaces with geonames.org and allows to select a location Interval : Not Yet Implemented. List : A list of values. The Attribute \"hlist= \" is mandatory! Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. The Attribute \"hlist= \" is mandatory! Radio : A GUI element for ListValue . A set of radio buttons. The Attribute \"hlist= \" is mandatory! SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. Textarea : A GUI element for TextValue . Presents a multiline textentry box. Optional attributes are \"cols=integer\", \"rows=integer\", \"width=percent\" and \"wrap=soft|hard\". Richtext : A GUI element for TextValue . Provides a richtext editor. Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. The Attribute \"numprops=integer\" indicates how many properties of the found resources should be indicated. It's mandatory! Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. The attributes \"max=decimal\" and \"min=decimal\" are mandatory! Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. Checkbox : A GUI element for BooleanValue . Fileupload : not yet documented! gui_attributes : See above cardinality : The cardinality indicates how often a given property may occur. The possible values are: \"1\": Exactly once (mandatory one value and only one) \"0-1\": The value may be omitted, but can occur only once \"1-n\": At least one value must be present. But multiple values may be present. \"0-n\": The value may be omitted, but may also occur multiple times. A complete example for a full ontology { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ], \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [ { \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=32\"], \"cardinality\": \"1\" }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=64\"], \"cardinality\": \"1\" }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\", \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"properties\": [ { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=64\", \"maxlength=64\"], \"cardinality\": \"1-n\" }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": [\"hlist=orgtype\"], \"cardinality\": \"1-n\" } ] } ] } } } JSON for lists only The JSON schema for uploading hierarchical lists only is simplyfied: { \"project\": { \"shortcode\": \"abcd\", \"lists\": [] } } The definition of the lists is the same as in the full upload of an ontology! A full example for creating lists only The following JSON definition assumes that there is a project with the shortcode 0808 . { \"project\": { \"shortcode\": \"0808\", \"lists\": [ { \"name\": \"test1\", \"labels\": { \"de\": \"TEST1\" }, \"nodes\": [ { \"name\": \"A\", \"labels\": { \"de\": \"_A_\" } }, { \"name\": \"B\", \"labels\": { \"de\": \"_B_\" }, \"nodes\": [ { \"name\": \"BA\", \"labels\": { \"de\": \"_BA_\" } }, { \"name\": \"BB\", \"labels\": { \"de\": \"_BB_\" } } ] }, { \"name\": \"C\", \"labels\": { \"de\": \"_C_\" } } ] } ] } }","title":"knora-create_ontology"},{"location":"create_ontology/#knora-create-ontology","text":"Creating an ontology with knora-create-ontology This script reads a JSON file containing the data model (ontology) definition, connects to the Knora server and creates the data model.","title":"knora-create-ontology"},{"location":"create_ontology/#usage","text":"$ knora-create-ontology data_model_definition.json It supports the foloowing options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: localhost:3333] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-v\" | \"--validate\" : If this flag is set, only the validation of the json is run \"-l\" | \"--lists\" : Only create the lists using simplyfied schema . Please note that in this case the project must exist.","title":"Usage:"},{"location":"create_ontology/#json-ontology-definition-format","text":"The JSON file contains a first object an object with the prefixes for external ontologies that are being used, followed by the definition of the project wic h includes all resources and properties:","title":"JSON ontology definition format"},{"location":"create_ontology/#prefixes","text":"{ \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": {} }","title":"Prefixes"},{"location":"create_ontology/#project-data","text":"The project definitions requires \"shortcode\" : A hexadecimal string in the range between \"0000\" and \"FFFF\" uniquely identifying the project. \"shortname\" : A short name (string) a \"longname\" : A longer string giving the full name for the project descriptions : Strings describing the projects content. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as JSON object with the language as key and the description as value. At least one description in one language is required. keywords : An array of keywords describing the project. lists : The definition of flat or hierarchical list (thesauri, controlled vocabularies) ontology : The definition of the data model (ontology) This a project definition lokks like follows: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project with no value.\", \"de\": \"Dies ist ein einfaches, wertloses Beispielproject\" } \"keywords\": [\"example\", \"senseless\"], \"lists\": [], \"ontology\": {} }","title":"Project data"},{"location":"create_ontology/#lists","text":"A List consists of a root node identifing the list and an array of subnodes. Each subnode may contain again subnodes (hierarchical list). A node has the following elements: name : Name of the node. Should be unique for the given list labels : Language dependent labels comments : language dependent comments (optional) nodes : Array of subnodes (optional \u2013 leave out if there are no subnodes) The lists object contains an array of lists. Here an example: \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Organisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ] the lists element is optional.","title":"Lists"},{"location":"create_ontology/#ontology","text":"The ontology object contains the definition of the data model. The ontology has the following elemens: name : The name of the ontology. This has to be a CNAME conformant name that can be use as prefix! label : Human readable and understandable name of the ontology resources : Array defining the resources (entities) of the data model \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [] }","title":"Ontology"},{"location":"create_ontology/#resources","text":"The resource classes are the primary entities of the data model. A resource class is a template for the representation of a real object that is represented in the DaSCh database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource consists of the following definitions: name : A name for the resource label : The string displayed of the resource is being accessed super : A resource class is always derived from an other resource. The most generic resource class Knora offers is \"Resource\" . The following parent predefined resources are provided by knora: Resource : A generic \"thing\" that represents an item from the reral world StillImageRepresentation : An object that is connected to a still image TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) AudioRepresentation : An object representing audio data (Not Yet Implemented) DDDRepresentation : An object representing a 3d representation (Not Yet Implemented) DocumentRepresentation : An object representing a opaque document (e.g. a PDF) MovingImageRepresentation : An object representing a moving image (video, film) Annotation : A predefined annotation object. It has the following properties defined: hasComment (1-n), isAnnotationOf (1) LinkObj : An resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n), hasLinkTo (1-n) Region : Represents a simple region. The class has the following properties: hasColor (1), isRegionOf (1) hasGeometry (1), isRegionOf (1), hasComment (0-n) However, a resource my be derived from a resource class in another ontology within the same project or from another resource class in the same ontology. In this case the reference has to have the form prefix : resourceclassname . - labels : Language dependent, human readable names - comments : Language dependend comments (optional) - properties : Array of property definition for this resource class. Example: \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [\u2026] }","title":"Resources"},{"location":"create_ontology/#properties","text":"Properties are the definition of the data fields a resource class may or must have. The properties object has the following fields: name : A name for the property super : A property has to be derived from at least one base property. The most generic base property Knora offers is hasValue . In addition the property may by als a subproperty of properties defined in external ontologies. In this case the qualified name including the prefix has to be given. The following base properties are definied by Knora: hasValue : This is the most generic base. hasLinkTo : This value represents a link to another resource. You have to indicate the the \" object \" as a prefixed IRI that identifies the resource class this link points to. hasColor : Defines a color value ( ColorValue ) hasComment : Defines a \"standard\" comment hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is a prt of a \"book\". isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. seqnum : An integer that is used to define a sequence number in an ordered set of instances. object : The \"object\" defines the type of the value that the property will store. The following object types are allowed: TextValue : Represents a text that may contain standoff markup ColorValue : A string in the form \"#rrggbb\" (standard web color format) DateValue : represents a date. It is a string having the format \"_calendar\":\"start\":\"end\" calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year, of only the year and month are given, the precision is to a month. end is optional if the date represents a clearely defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means antime in between 1925 and the 22nd March 1927. DecimalValue : a number with decimal point GeomValue : Represents a geometrical shape as JSON. GeonameValue : Represents a location ID in geonames.org IntValue : Represents an integer value BooleanValue : Represents a Boolean (\"true\" or \"false) UriValue : : Represents an URI IntervalValue : Represents a time-interval ListValue : Represents a node of a (possibly hierarchical) list labels : Language dependent, human readable names gui_element : The gui_element is \u2013 strictly seen \u2013 not part of the data. It gives the generic GUI a hint about how the property should be presented to the used. Each gui_element may have associated gui_attributes which contain further hints. There are the following gui_elements available: Colorpicker : The only GUI element for ColorValue . Let's You pick a color. It requires the attribute \"ncolors=integer\" Date : The only GUI element for DateValue . A date picker gui. No attributes Geometry : Not Yet Implemented. Geonames : The only GUI element for GeonameValue . Interfaces with geonames.org and allows to select a location Interval : Not Yet Implemented. List : A list of values. The Attribute \"hlist= \" is mandatory! Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. The Attribute \"hlist= \" is mandatory! Radio : A GUI element for ListValue . A set of radio buttons. The Attribute \"hlist= \" is mandatory! SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. Textarea : A GUI element for TextValue . Presents a multiline textentry box. Optional attributes are \"cols=integer\", \"rows=integer\", \"width=percent\" and \"wrap=soft|hard\". Richtext : A GUI element for TextValue . Provides a richtext editor. Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. The Attribute \"numprops=integer\" indicates how many properties of the found resources should be indicated. It's mandatory! Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. The attributes \"max=decimal\" and \"min=decimal\" are mandatory! Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. Checkbox : A GUI element for BooleanValue . Fileupload : not yet documented! gui_attributes : See above cardinality : The cardinality indicates how often a given property may occur. The possible values are: \"1\": Exactly once (mandatory one value and only one) \"0-1\": The value may be omitted, but can occur only once \"1-n\": At least one value must be present. But multiple values may be present. \"0-n\": The value may be omitted, but may also occur multiple times.","title":"Properties"},{"location":"create_ontology/#a-complete-example-for-a-full-ontology","text":"{ \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [ { \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [ { \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [ { \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] } ], \"ontology\": { \"name\": \"teimp\", \"label\": \"Test import ontology\", \"resources\": [ { \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"properties\": [ { \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=32\"], \"cardinality\": \"1\" }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=24\", \"maxlength=64\"], \"cardinality\": \"1\" }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\", \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"properties\": [ { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": [\"size=64\", \"maxlength=64\"], \"cardinality\": \"1-n\" }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": [\"hlist=orgtype\"], \"cardinality\": \"1-n\" } ] } ] } } }","title":"A complete example for a full ontology"},{"location":"create_ontology/#json-for-lists-only","text":"The JSON schema for uploading hierarchical lists only is simplyfied: { \"project\": { \"shortcode\": \"abcd\", \"lists\": [] } } The definition of the lists is the same as in the full upload of an ontology!","title":"JSON for lists only"},{"location":"create_ontology/#a-full-example-for-creating-lists-only","text":"The following JSON definition assumes that there is a project with the shortcode 0808 . { \"project\": { \"shortcode\": \"0808\", \"lists\": [ { \"name\": \"test1\", \"labels\": { \"de\": \"TEST1\" }, \"nodes\": [ { \"name\": \"A\", \"labels\": { \"de\": \"_A_\" } }, { \"name\": \"B\", \"labels\": { \"de\": \"_B_\" }, \"nodes\": [ { \"name\": \"BA\", \"labels\": { \"de\": \"_BA_\" } }, { \"name\": \"BB\", \"labels\": { \"de\": \"_BB_\" } } ] }, { \"name\": \"C\", \"labels\": { \"de\": \"_C_\" } } ] } ] } }","title":"A full example for creating lists only"},{"location":"knoractl/","text":"","title":"Knoractl"},{"location":"xml2knora/","text":"knora-xml-import Use knora-xml-import for importing data from an XML-file into knora. Usage: $ knora-xml-import project-show-name It supports the following options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: http://0.0.0.0:3333] \"-S sipi-server\" | \"--sipi sipi-server\" : The URL of the SIPI IIIF server [default: http://0.0.0.0:1024] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-F folder\" | \"--folder folder\" : Folder containing the XML-file with the data and the images [default: project-short-name .dir] Data folder The data folder contains the - the XML file that has the same name as the project with the extension .xml - an optional directory called assets that contains icons etc. - a directory called images containing the images for StillImageResources - may contain the project ontology definition as JSON file Knora import XML format Preample The import file must start with the standard XML header: <?xml version='1.0' encoding='utf-8'?> knora -tag The knora -tag describes a set of resources that are to be imported. It is the container for an arbitrary number of resource tags and may only contain resource tags. The knora -tag defines has the following options: - xmlns:xsi : \"http://www.w3.org/2001/XMLSchema-instance\" [required] - xsi:schemaLocation : Path to knora XML schema file for validation [optional] - shortcode : Knora project shortcode, e.g. \"0801\" [required] - vocabulary : Name of the ontology [required] Thus, the knora-tag may b used as follows: <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"../knora-data-schema.xsd\" shortcode=\"0806\" vocabulary=\"webern\"> \u2026 </knora> <resource> -tag A resource -tag contains all necessary information to create a resource. It has th following options: - label : The label, a human readable, semantical meaningfull short name of the resource [required] - restype : The resource type as defined within the ontology [required] - unique_id : A unique, arbitrary string giving a unique ID to the resource. This ID is only used during the import process for referencing this resource from other resources. During the import process, it will be replaced by the IRI used internally by Knora. <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\"> \u2026 </resource> The resource-tag may contain the following tags describing properties (data fields): - \\<image> : In case of the StillImageResource contains the path to the image file. - \\<text-prop> : Contains text values - \\<color-prop> : Contains color values - \\<date-prop> : Contains date values - \\<float-prop> : Contains decimal values - \\<geometry-prop> : Contains a JSON geometry definition for a region - \\<geoname-prop> : Contains a geoname.org location code - \\<list-prop> : Contains list tag labels - \\<iconclass-prop> : Contains iconclass.org codes - \\<integer-prop> : Contains integer values - \\<interval-prop> : Contains interval values - \\<period-prop> : Contains time period values - \\<resptr-prop> : Contains links othr resources - \\<time-prop> : Contains time values - \\<uri-prop> : Contains URI values - \\<boolean-prop> : Contaibs boolean values Properties and values <image> -tag The image property contains the path to an image file. It must only be used if the resource is a StillImageResource ! Note : There is only one \\<image> tag allowed per StillImageResource! Example: <image>postcards.dir/images/EURUS015a.jpg</image> <text-prop> -tag The text property tag is used to list text values. It has one mandatory options: - name : Name of the property as given in the ontology Example: <text-prop name=\"hasTranslation\"> The <text-prop> -tag must contain at least one \\<text\\> -tag. There are several variants of text tags: <text> -tag The <text> -tag has the following options: - encoding : either \"utf8\" or \"hex64\" [required] - utf8 : The tag describes a simple text without markup. The text is a simple utf-8 string - hex64 : The tag describes a complex text containing markup. It must be a hex64 encoded string in the XML-format as defined by Knora. - resrefs : A list of resource ID's that are referenced in the markup, separated by the \"|\"-character such as \"2569981|6618\" [optional] Knora-xml-import assumes that standard mapping for Knora is being used (Custom mapping to customized standoff tags is not yet implemented!) E.g. a text containing a link to another resource must be encoded like follows: 'Brief: <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a>' Please note that the href-option withiin the anchor tag points to an internal resource of knora and this has to have the special format \" IRI: res-id :IRI \" where res-id is the resource id defined within the XML import file. At the moment it is not yet possible to reference already existing resources using the Knora-IRI (will b implemented soon). In case the string references one or more internal resources, the option rsrefs must be using to indicate there ID's! The string must be encoded using standard hex64 encoding. A complete example for a simple text: <text-prop name=\"hasComment\"> <text encoding=\"utf8\">Probe bei \"Wimberger\". Lokal in Wien?</text> </text-prop> A complete example of a complex text which encodes the text <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a><p></p> containing a link to the internal resource with the ID=\"6618\": <text-prop name=\"hasComment\"> <text resrefs=\"6618\" encoding=\"hex64\">PGEgY2xhc3M9InNhbHNhaC1saW5rIiBocmVmPSJJUkk6NjYxODpJUkkiPjxwPldlYmVybiBhbiBXaWxsaGVpbSwgMTAuMTAuMTkyODwvcD48L2E+PHA+PC9wPg==</text> </text-prop> Within one property, simple and complex text values may be mixed. <color-prop> -tag The color-prop tag is used to define a color property. It has one mandatory options: - name : Name of the property as given in the ontology <color> -tag The color-tag is used to indicate a color value. The color has to be giiven in web-notation, that is a \"#\" followed by 3 or 6 hex numerals. A propery with 2 color valus would be defined as follows: <color-prop name=\"hasColor\"> <color>#00ff66</color> <color>#ff00ff</color> </color-prop> <date-prop> -tag Is used to define knora dates. Options: - name : Name of the property as given in the ontology <date> -tag A Knora date value. It has the following format: calendar:epoch:yyyy-mm-dd:epoch:yyyy-mm-dd calendar : either \"JULIAN\" or \"GREGORIAN\" [optional, default: GREGORIAN] epoch : either \"BCE\" or \"CE\" [optional, default CE] yyyy : year with four digits (at least one must be given) mm : month with two digits 01, 02, .., 12 dd : day eith two digits If two dates are given, the date is in between the two given borders.","title":"knora-xml-import"},{"location":"xml2knora/#knora-xml-import","text":"Use knora-xml-import for importing data from an XML-file into knora.","title":"knora-xml-import"},{"location":"xml2knora/#usage","text":"$ knora-xml-import project-show-name It supports the following options: \"-s server\" | \"--server server\" : The URl of the Knora server [default: http://0.0.0.0:3333] \"-S sipi-server\" | \"--sipi sipi-server\" : The URL of the SIPI IIIF server [default: http://0.0.0.0:1024] \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com] \"-p password\" | \"--password password\" : The password for login to the Knora server [default: test] \"-F folder\" | \"--folder folder\" : Folder containing the XML-file with the data and the images [default: project-short-name .dir]","title":"Usage:"},{"location":"xml2knora/#data-folder","text":"The data folder contains the - the XML file that has the same name as the project with the extension .xml - an optional directory called assets that contains icons etc. - a directory called images containing the images for StillImageResources - may contain the project ontology definition as JSON file","title":"Data folder"},{"location":"xml2knora/#knora-import-xml-format","text":"","title":"Knora import XML format"},{"location":"xml2knora/#preample","text":"The import file must start with the standard XML header: <?xml version='1.0' encoding='utf-8'?>","title":"Preample"},{"location":"xml2knora/#knora-tag","text":"The knora -tag describes a set of resources that are to be imported. It is the container for an arbitrary number of resource tags and may only contain resource tags. The knora -tag defines has the following options: - xmlns:xsi : \"http://www.w3.org/2001/XMLSchema-instance\" [required] - xsi:schemaLocation : Path to knora XML schema file for validation [optional] - shortcode : Knora project shortcode, e.g. \"0801\" [required] - vocabulary : Name of the ontology [required] Thus, the knora-tag may b used as follows: <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"../knora-data-schema.xsd\" shortcode=\"0806\" vocabulary=\"webern\"> \u2026 </knora>","title":"knora-tag"},{"location":"xml2knora/#ltresourcegt-tag","text":"A resource -tag contains all necessary information to create a resource. It has th following options: - label : The label, a human readable, semantical meaningfull short name of the resource [required] - restype : The resource type as defined within the ontology [required] - unique_id : A unique, arbitrary string giving a unique ID to the resource. This ID is only used during the import process for referencing this resource from other resources. During the import process, it will be replaced by the IRI used internally by Knora. <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\"> \u2026 </resource> The resource-tag may contain the following tags describing properties (data fields): - \\<image> : In case of the StillImageResource contains the path to the image file. - \\<text-prop> : Contains text values - \\<color-prop> : Contains color values - \\<date-prop> : Contains date values - \\<float-prop> : Contains decimal values - \\<geometry-prop> : Contains a JSON geometry definition for a region - \\<geoname-prop> : Contains a geoname.org location code - \\<list-prop> : Contains list tag labels - \\<iconclass-prop> : Contains iconclass.org codes - \\<integer-prop> : Contains integer values - \\<interval-prop> : Contains interval values - \\<period-prop> : Contains time period values - \\<resptr-prop> : Contains links othr resources - \\<time-prop> : Contains time values - \\<uri-prop> : Contains URI values - \\<boolean-prop> : Contaibs boolean values","title":"&lt;resource&gt;-tag"},{"location":"xml2knora/#properties-and-values","text":"","title":"Properties and values"},{"location":"xml2knora/#ltimagegt-tag","text":"The image property contains the path to an image file. It must only be used if the resource is a StillImageResource ! Note : There is only one \\<image> tag allowed per StillImageResource! Example: <image>postcards.dir/images/EURUS015a.jpg</image>","title":"&lt;image&gt;-tag"},{"location":"xml2knora/#lttext-propgt-tag","text":"The text property tag is used to list text values. It has one mandatory options: - name : Name of the property as given in the ontology Example: <text-prop name=\"hasTranslation\"> The <text-prop> -tag must contain at least one \\<text\\> -tag. There are several variants of text tags:","title":"&lt;text-prop&gt;-tag"},{"location":"xml2knora/#lttextgt-tag","text":"The <text> -tag has the following options: - encoding : either \"utf8\" or \"hex64\" [required] - utf8 : The tag describes a simple text without markup. The text is a simple utf-8 string - hex64 : The tag describes a complex text containing markup. It must be a hex64 encoded string in the XML-format as defined by Knora. - resrefs : A list of resource ID's that are referenced in the markup, separated by the \"|\"-character such as \"2569981|6618\" [optional] Knora-xml-import assumes that standard mapping for Knora is being used (Custom mapping to customized standoff tags is not yet implemented!) E.g. a text containing a link to another resource must be encoded like follows: 'Brief: <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a>' Please note that the href-option withiin the anchor tag points to an internal resource of knora and this has to have the special format \" IRI: res-id :IRI \" where res-id is the resource id defined within the XML import file. At the moment it is not yet possible to reference already existing resources using the Knora-IRI (will b implemented soon). In case the string references one or more internal resources, the option rsrefs must be using to indicate there ID's! The string must be encoded using standard hex64 encoding. A complete example for a simple text: <text-prop name=\"hasComment\"> <text encoding=\"utf8\">Probe bei \"Wimberger\". Lokal in Wien?</text> </text-prop> A complete example of a complex text which encodes the text <a class=\"salsah-link\" href=\"IRI:6618:IRI\"><p>Webern an Willheim, 10.10.1928</p></a><p></p> containing a link to the internal resource with the ID=\"6618\": <text-prop name=\"hasComment\"> <text resrefs=\"6618\" encoding=\"hex64\">PGEgY2xhc3M9InNhbHNhaC1saW5rIiBocmVmPSJJUkk6NjYxODpJUkkiPjxwPldlYmVybiBhbiBXaWxsaGVpbSwgMTAuMTAuMTkyODwvcD48L2E+PHA+PC9wPg==</text> </text-prop> Within one property, simple and complex text values may be mixed.","title":"&lt;text&gt;-tag"},{"location":"xml2knora/#ltcolor-propgt-tag","text":"The color-prop tag is used to define a color property. It has one mandatory options: - name : Name of the property as given in the ontology","title":"&lt;color-prop&gt;-tag"},{"location":"xml2knora/#ltcolorgt-tag","text":"The color-tag is used to indicate a color value. The color has to be giiven in web-notation, that is a \"#\" followed by 3 or 6 hex numerals. A propery with 2 color valus would be defined as follows: <color-prop name=\"hasColor\"> <color>#00ff66</color> <color>#ff00ff</color> </color-prop>","title":"&lt;color&gt;-tag"},{"location":"xml2knora/#ltdate-propgt-tag","text":"Is used to define knora dates. Options: - name : Name of the property as given in the ontology","title":"&lt;date-prop&gt;-tag"},{"location":"xml2knora/#ltdategt-tag","text":"A Knora date value. It has the following format: calendar:epoch:yyyy-mm-dd:epoch:yyyy-mm-dd calendar : either \"JULIAN\" or \"GREGORIAN\" [optional, default: GREGORIAN] epoch : either \"BCE\" or \"CE\" [optional, default CE] yyyy : year with four digits (at least one must be given) mm : month with two digits 01, 02, .., 12 dd : day eith two digits If two dates are given, the date is in between the two given borders.","title":"&lt;date&gt;-tag"}]}